// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
	"github.com/google/uuid"
)

// TestFeedItemCreate is the builder for creating a TestFeedItem entity.
type TestFeedItemCreate struct {
	config
	mutation *TestFeedItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (tfic *TestFeedItemCreate) SetTitle(s string) *TestFeedItemCreate {
	tfic.mutation.SetTitle(s)
	return tfic
}

// SetDescription sets the "description" field.
func (tfic *TestFeedItemCreate) SetDescription(s string) *TestFeedItemCreate {
	tfic.mutation.SetDescription(s)
	return tfic
}

// SetLink sets the "link" field.
func (tfic *TestFeedItemCreate) SetLink(s string) *TestFeedItemCreate {
	tfic.mutation.SetLink(s)
	return tfic
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (tfic *TestFeedItemCreate) SetNillableLink(s *string) *TestFeedItemCreate {
	if s != nil {
		tfic.SetLink(*s)
	}
	return tfic
}

// SetPublishedAt sets the "published_at" field.
func (tfic *TestFeedItemCreate) SetPublishedAt(t time.Time) *TestFeedItemCreate {
	tfic.mutation.SetPublishedAt(t)
	return tfic
}

// SetCreatedAt sets the "created_at" field.
func (tfic *TestFeedItemCreate) SetCreatedAt(t time.Time) *TestFeedItemCreate {
	tfic.mutation.SetCreatedAt(t)
	return tfic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfic *TestFeedItemCreate) SetNillableCreatedAt(t *time.Time) *TestFeedItemCreate {
	if t != nil {
		tfic.SetCreatedAt(*t)
	}
	return tfic
}

// SetUpdatedAt sets the "updated_at" field.
func (tfic *TestFeedItemCreate) SetUpdatedAt(t time.Time) *TestFeedItemCreate {
	tfic.mutation.SetUpdatedAt(t)
	return tfic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tfic *TestFeedItemCreate) SetNillableUpdatedAt(t *time.Time) *TestFeedItemCreate {
	if t != nil {
		tfic.SetUpdatedAt(*t)
	}
	return tfic
}

// SetID sets the "id" field.
func (tfic *TestFeedItemCreate) SetID(i int) *TestFeedItemCreate {
	tfic.mutation.SetID(i)
	return tfic
}

// SetTestFeedID sets the "test_feed" edge to the TestFeed entity by ID.
func (tfic *TestFeedItemCreate) SetTestFeedID(id uuid.UUID) *TestFeedItemCreate {
	tfic.mutation.SetTestFeedID(id)
	return tfic
}

// SetTestFeed sets the "test_feed" edge to the TestFeed entity.
func (tfic *TestFeedItemCreate) SetTestFeed(t *TestFeed) *TestFeedItemCreate {
	return tfic.SetTestFeedID(t.ID)
}

// Mutation returns the TestFeedItemMutation object of the builder.
func (tfic *TestFeedItemCreate) Mutation() *TestFeedItemMutation {
	return tfic.mutation
}

// Save creates the TestFeedItem in the database.
func (tfic *TestFeedItemCreate) Save(ctx context.Context) (*TestFeedItem, error) {
	tfic.defaults()
	return withHooks(ctx, tfic.sqlSave, tfic.mutation, tfic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfic *TestFeedItemCreate) SaveX(ctx context.Context) *TestFeedItem {
	v, err := tfic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfic *TestFeedItemCreate) Exec(ctx context.Context) error {
	_, err := tfic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfic *TestFeedItemCreate) ExecX(ctx context.Context) {
	if err := tfic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfic *TestFeedItemCreate) defaults() {
	if _, ok := tfic.mutation.CreatedAt(); !ok {
		v := testfeeditem.DefaultCreatedAt()
		tfic.mutation.SetCreatedAt(v)
	}
	if _, ok := tfic.mutation.UpdatedAt(); !ok {
		v := testfeeditem.DefaultUpdatedAt()
		tfic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfic *TestFeedItemCreate) check() error {
	if _, ok := tfic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TestFeedItem.title"`)}
	}
	if v, ok := tfic.mutation.Title(); ok {
		if err := testfeeditem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.title": %w`, err)}
		}
	}
	if _, ok := tfic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "TestFeedItem.description"`)}
	}
	if v, ok := tfic.mutation.Description(); ok {
		if err := testfeeditem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.description": %w`, err)}
		}
	}
	if v, ok := tfic.mutation.Link(); ok {
		if err := testfeeditem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.link": %w`, err)}
		}
	}
	if _, ok := tfic.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "TestFeedItem.published_at"`)}
	}
	if _, ok := tfic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestFeedItem.created_at"`)}
	}
	if _, ok := tfic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestFeedItem.updated_at"`)}
	}
	if _, ok := tfic.mutation.TestFeedID(); !ok {
		return &ValidationError{Name: "test_feed", err: errors.New(`ent: missing required edge "TestFeedItem.test_feed"`)}
	}
	return nil
}

func (tfic *TestFeedItemCreate) sqlSave(ctx context.Context) (*TestFeedItem, error) {
	if err := tfic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tfic.mutation.id = &_node.ID
	tfic.mutation.done = true
	return _node, nil
}

func (tfic *TestFeedItemCreate) createSpec() (*TestFeedItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TestFeedItem{config: tfic.config}
		_spec = sqlgraph.NewCreateSpec(testfeeditem.Table, sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tfic.conflict
	if id, ok := tfic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfic.mutation.Title(); ok {
		_spec.SetField(testfeeditem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tfic.mutation.Description(); ok {
		_spec.SetField(testfeeditem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tfic.mutation.Link(); ok {
		_spec.SetField(testfeeditem.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := tfic.mutation.PublishedAt(); ok {
		_spec.SetField(testfeeditem.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := tfic.mutation.CreatedAt(); ok {
		_spec.SetField(testfeeditem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tfic.mutation.UpdatedAt(); ok {
		_spec.SetField(testfeeditem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tfic.mutation.TestFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeeditem.TestFeedTable,
			Columns: []string{testfeeditem.TestFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_feed_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestFeedItem.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestFeedItemUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (tfic *TestFeedItemCreate) OnConflict(opts ...sql.ConflictOption) *TestFeedItemUpsertOne {
	tfic.conflict = opts
	return &TestFeedItemUpsertOne{
		create: tfic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tfic *TestFeedItemCreate) OnConflictColumns(columns ...string) *TestFeedItemUpsertOne {
	tfic.conflict = append(tfic.conflict, sql.ConflictColumns(columns...))
	return &TestFeedItemUpsertOne{
		create: tfic,
	}
}

type (
	// TestFeedItemUpsertOne is the builder for "upsert"-ing
	//  one TestFeedItem node.
	TestFeedItemUpsertOne struct {
		create *TestFeedItemCreate
	}

	// TestFeedItemUpsert is the "OnConflict" setter.
	TestFeedItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *TestFeedItemUpsert) SetTitle(v string) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdateTitle() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *TestFeedItemUpsert) SetDescription(v string) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdateDescription() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldDescription)
	return u
}

// SetLink sets the "link" field.
func (u *TestFeedItemUpsert) SetLink(v string) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdateLink() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldLink)
	return u
}

// ClearLink clears the value of the "link" field.
func (u *TestFeedItemUpsert) ClearLink() *TestFeedItemUpsert {
	u.SetNull(testfeeditem.FieldLink)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *TestFeedItemUpsert) SetPublishedAt(v time.Time) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdatePublishedAt() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldPublishedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestFeedItemUpsert) SetCreatedAt(v time.Time) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdateCreatedAt() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestFeedItemUpsert) SetUpdatedAt(v time.Time) *TestFeedItemUpsert {
	u.Set(testfeeditem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestFeedItemUpsert) UpdateUpdatedAt() *TestFeedItemUpsert {
	u.SetExcluded(testfeeditem.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testfeeditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestFeedItemUpsertOne) UpdateNewValues() *TestFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testfeeditem.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestFeedItemUpsertOne) Ignore() *TestFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestFeedItemUpsertOne) DoNothing() *TestFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestFeedItemCreate.OnConflict
// documentation for more info.
func (u *TestFeedItemUpsertOne) Update(set func(*TestFeedItemUpsert)) *TestFeedItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestFeedItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TestFeedItemUpsertOne) SetTitle(v string) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdateTitle() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TestFeedItemUpsertOne) SetDescription(v string) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdateDescription() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateDescription()
	})
}

// SetLink sets the "link" field.
func (u *TestFeedItemUpsertOne) SetLink(v string) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdateLink() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *TestFeedItemUpsertOne) ClearLink() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.ClearLink()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *TestFeedItemUpsertOne) SetPublishedAt(v time.Time) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdatePublishedAt() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdatePublishedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TestFeedItemUpsertOne) SetCreatedAt(v time.Time) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdateCreatedAt() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestFeedItemUpsertOne) SetUpdatedAt(v time.Time) *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertOne) UpdateUpdatedAt() *TestFeedItemUpsertOne {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TestFeedItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestFeedItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestFeedItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestFeedItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestFeedItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestFeedItemCreateBulk is the builder for creating many TestFeedItem entities in bulk.
type TestFeedItemCreateBulk struct {
	config
	err      error
	builders []*TestFeedItemCreate
	conflict []sql.ConflictOption
}

// Save creates the TestFeedItem entities in the database.
func (tficb *TestFeedItemCreateBulk) Save(ctx context.Context) ([]*TestFeedItem, error) {
	if tficb.err != nil {
		return nil, tficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tficb.builders))
	nodes := make([]*TestFeedItem, len(tficb.builders))
	mutators := make([]Mutator, len(tficb.builders))
	for i := range tficb.builders {
		func(i int, root context.Context) {
			builder := tficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestFeedItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tficb *TestFeedItemCreateBulk) SaveX(ctx context.Context) []*TestFeedItem {
	v, err := tficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tficb *TestFeedItemCreateBulk) Exec(ctx context.Context) error {
	_, err := tficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tficb *TestFeedItemCreateBulk) ExecX(ctx context.Context) {
	if err := tficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestFeedItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestFeedItemUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (tficb *TestFeedItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestFeedItemUpsertBulk {
	tficb.conflict = opts
	return &TestFeedItemUpsertBulk{
		create: tficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tficb *TestFeedItemCreateBulk) OnConflictColumns(columns ...string) *TestFeedItemUpsertBulk {
	tficb.conflict = append(tficb.conflict, sql.ConflictColumns(columns...))
	return &TestFeedItemUpsertBulk{
		create: tficb,
	}
}

// TestFeedItemUpsertBulk is the builder for "upsert"-ing
// a bulk of TestFeedItem nodes.
type TestFeedItemUpsertBulk struct {
	create *TestFeedItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testfeeditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestFeedItemUpsertBulk) UpdateNewValues() *TestFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testfeeditem.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestFeedItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestFeedItemUpsertBulk) Ignore() *TestFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestFeedItemUpsertBulk) DoNothing() *TestFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestFeedItemCreateBulk.OnConflict
// documentation for more info.
func (u *TestFeedItemUpsertBulk) Update(set func(*TestFeedItemUpsert)) *TestFeedItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestFeedItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TestFeedItemUpsertBulk) SetTitle(v string) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdateTitle() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TestFeedItemUpsertBulk) SetDescription(v string) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdateDescription() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateDescription()
	})
}

// SetLink sets the "link" field.
func (u *TestFeedItemUpsertBulk) SetLink(v string) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdateLink() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *TestFeedItemUpsertBulk) ClearLink() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.ClearLink()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *TestFeedItemUpsertBulk) SetPublishedAt(v time.Time) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdatePublishedAt() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdatePublishedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TestFeedItemUpsertBulk) SetCreatedAt(v time.Time) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdateCreatedAt() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestFeedItemUpsertBulk) SetUpdatedAt(v time.Time) *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestFeedItemUpsertBulk) UpdateUpdatedAt() *TestFeedItemUpsertBulk {
	return u.Update(func(s *TestFeedItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TestFeedItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestFeedItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestFeedItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestFeedItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
