// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/scrapingselector"
	"github.com/ITK13201/rss-generator/ent/site"
)

// ScrapingSelectorCreate is the builder for creating a ScrapingSelector entity.
type ScrapingSelectorCreate struct {
	config
	mutation *ScrapingSelectorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSelector sets the "selector" field.
func (ssc *ScrapingSelectorCreate) SetSelector(s string) *ScrapingSelectorCreate {
	ssc.mutation.SetSelector(s)
	return ssc
}

// SetInnerSelector sets the "inner_selector" field.
func (ssc *ScrapingSelectorCreate) SetInnerSelector(s string) *ScrapingSelectorCreate {
	ssc.mutation.SetInnerSelector(s)
	return ssc
}

// SetTitleSelector sets the "title_selector" field.
func (ssc *ScrapingSelectorCreate) SetTitleSelector(s string) *ScrapingSelectorCreate {
	ssc.mutation.SetTitleSelector(s)
	return ssc
}

// SetDescriptionSelector sets the "description_selector" field.
func (ssc *ScrapingSelectorCreate) SetDescriptionSelector(s string) *ScrapingSelectorCreate {
	ssc.mutation.SetDescriptionSelector(s)
	return ssc
}

// SetNillableDescriptionSelector sets the "description_selector" field if the given value is not nil.
func (ssc *ScrapingSelectorCreate) SetNillableDescriptionSelector(s *string) *ScrapingSelectorCreate {
	if s != nil {
		ssc.SetDescriptionSelector(*s)
	}
	return ssc
}

// SetLinkSelector sets the "link_selector" field.
func (ssc *ScrapingSelectorCreate) SetLinkSelector(s string) *ScrapingSelectorCreate {
	ssc.mutation.SetLinkSelector(s)
	return ssc
}

// SetNillableLinkSelector sets the "link_selector" field if the given value is not nil.
func (ssc *ScrapingSelectorCreate) SetNillableLinkSelector(s *string) *ScrapingSelectorCreate {
	if s != nil {
		ssc.SetLinkSelector(*s)
	}
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *ScrapingSelectorCreate) SetCreatedAt(t time.Time) *ScrapingSelectorCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *ScrapingSelectorCreate) SetNillableCreatedAt(t *time.Time) *ScrapingSelectorCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *ScrapingSelectorCreate) SetUpdatedAt(t time.Time) *ScrapingSelectorCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *ScrapingSelectorCreate) SetNillableUpdatedAt(t *time.Time) *ScrapingSelectorCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *ScrapingSelectorCreate) SetID(i int) *ScrapingSelectorCreate {
	ssc.mutation.SetID(i)
	return ssc
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (ssc *ScrapingSelectorCreate) SetSiteID(id int) *ScrapingSelectorCreate {
	ssc.mutation.SetSiteID(id)
	return ssc
}

// SetSite sets the "site" edge to the Site entity.
func (ssc *ScrapingSelectorCreate) SetSite(s *Site) *ScrapingSelectorCreate {
	return ssc.SetSiteID(s.ID)
}

// Mutation returns the ScrapingSelectorMutation object of the builder.
func (ssc *ScrapingSelectorCreate) Mutation() *ScrapingSelectorMutation {
	return ssc.mutation
}

// Save creates the ScrapingSelector in the database.
func (ssc *ScrapingSelectorCreate) Save(ctx context.Context) (*ScrapingSelector, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ScrapingSelectorCreate) SaveX(ctx context.Context) *ScrapingSelector {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ScrapingSelectorCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ScrapingSelectorCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *ScrapingSelectorCreate) defaults() {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := scrapingselector.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := scrapingselector.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ScrapingSelectorCreate) check() error {
	if _, ok := ssc.mutation.Selector(); !ok {
		return &ValidationError{Name: "selector", err: errors.New(`ent: missing required field "ScrapingSelector.selector"`)}
	}
	if v, ok := ssc.mutation.Selector(); ok {
		if err := scrapingselector.SelectorValidator(v); err != nil {
			return &ValidationError{Name: "selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.InnerSelector(); !ok {
		return &ValidationError{Name: "inner_selector", err: errors.New(`ent: missing required field "ScrapingSelector.inner_selector"`)}
	}
	if v, ok := ssc.mutation.InnerSelector(); ok {
		if err := scrapingselector.InnerSelectorValidator(v); err != nil {
			return &ValidationError{Name: "inner_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.inner_selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.TitleSelector(); !ok {
		return &ValidationError{Name: "title_selector", err: errors.New(`ent: missing required field "ScrapingSelector.title_selector"`)}
	}
	if v, ok := ssc.mutation.TitleSelector(); ok {
		if err := scrapingselector.TitleSelectorValidator(v); err != nil {
			return &ValidationError{Name: "title_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.title_selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScrapingSelector.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScrapingSelector.updated_at"`)}
	}
	if _, ok := ssc.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site", err: errors.New(`ent: missing required edge "ScrapingSelector.site"`)}
	}
	return nil
}

func (ssc *ScrapingSelectorCreate) sqlSave(ctx context.Context) (*ScrapingSelector, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *ScrapingSelectorCreate) createSpec() (*ScrapingSelector, *sqlgraph.CreateSpec) {
	var (
		_node = &ScrapingSelector{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(scrapingselector.Table, sqlgraph.NewFieldSpec(scrapingselector.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.Selector(); ok {
		_spec.SetField(scrapingselector.FieldSelector, field.TypeString, value)
		_node.Selector = value
	}
	if value, ok := ssc.mutation.InnerSelector(); ok {
		_spec.SetField(scrapingselector.FieldInnerSelector, field.TypeString, value)
		_node.InnerSelector = value
	}
	if value, ok := ssc.mutation.TitleSelector(); ok {
		_spec.SetField(scrapingselector.FieldTitleSelector, field.TypeString, value)
		_node.TitleSelector = value
	}
	if value, ok := ssc.mutation.DescriptionSelector(); ok {
		_spec.SetField(scrapingselector.FieldDescriptionSelector, field.TypeString, value)
		_node.DescriptionSelector = value
	}
	if value, ok := ssc.mutation.LinkSelector(); ok {
		_spec.SetField(scrapingselector.FieldLinkSelector, field.TypeString, value)
		_node.LinkSelector = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(scrapingselector.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(scrapingselector.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ssc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scrapingselector.SiteTable,
			Columns: []string{scrapingselector.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScrapingSelector.Create().
//		SetSelector(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScrapingSelectorUpsert) {
//			SetSelector(v+v).
//		}).
//		Exec(ctx)
func (ssc *ScrapingSelectorCreate) OnConflict(opts ...sql.ConflictOption) *ScrapingSelectorUpsertOne {
	ssc.conflict = opts
	return &ScrapingSelectorUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *ScrapingSelectorCreate) OnConflictColumns(columns ...string) *ScrapingSelectorUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &ScrapingSelectorUpsertOne{
		create: ssc,
	}
}

type (
	// ScrapingSelectorUpsertOne is the builder for "upsert"-ing
	//  one ScrapingSelector node.
	ScrapingSelectorUpsertOne struct {
		create *ScrapingSelectorCreate
	}

	// ScrapingSelectorUpsert is the "OnConflict" setter.
	ScrapingSelectorUpsert struct {
		*sql.UpdateSet
	}
)

// SetSelector sets the "selector" field.
func (u *ScrapingSelectorUpsert) SetSelector(v string) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldSelector, v)
	return u
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateSelector() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldSelector)
	return u
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSelectorUpsert) SetInnerSelector(v string) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldInnerSelector, v)
	return u
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateInnerSelector() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldInnerSelector)
	return u
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSelectorUpsert) SetTitleSelector(v string) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldTitleSelector, v)
	return u
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateTitleSelector() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldTitleSelector)
	return u
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSelectorUpsert) SetDescriptionSelector(v string) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldDescriptionSelector, v)
	return u
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateDescriptionSelector() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldDescriptionSelector)
	return u
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSelectorUpsert) ClearDescriptionSelector() *ScrapingSelectorUpsert {
	u.SetNull(scrapingselector.FieldDescriptionSelector)
	return u
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSelectorUpsert) SetLinkSelector(v string) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldLinkSelector, v)
	return u
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateLinkSelector() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldLinkSelector)
	return u
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSelectorUpsert) ClearLinkSelector() *ScrapingSelectorUpsert {
	u.SetNull(scrapingselector.FieldLinkSelector)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSelectorUpsert) SetCreatedAt(v time.Time) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateCreatedAt() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSelectorUpsert) SetUpdatedAt(v time.Time) *ScrapingSelectorUpsert {
	u.Set(scrapingselector.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsert) UpdateUpdatedAt() *ScrapingSelectorUpsert {
	u.SetExcluded(scrapingselector.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scrapingselector.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScrapingSelectorUpsertOne) UpdateNewValues() *ScrapingSelectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scrapingselector.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScrapingSelectorUpsertOne) Ignore() *ScrapingSelectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScrapingSelectorUpsertOne) DoNothing() *ScrapingSelectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScrapingSelectorCreate.OnConflict
// documentation for more info.
func (u *ScrapingSelectorUpsertOne) Update(set func(*ScrapingSelectorUpsert)) *ScrapingSelectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScrapingSelectorUpsert{UpdateSet: update})
	}))
	return u
}

// SetSelector sets the "selector" field.
func (u *ScrapingSelectorUpsertOne) SetSelector(v string) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateSelector()
	})
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSelectorUpsertOne) SetInnerSelector(v string) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetInnerSelector(v)
	})
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateInnerSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateInnerSelector()
	})
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSelectorUpsertOne) SetTitleSelector(v string) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetTitleSelector(v)
	})
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateTitleSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateTitleSelector()
	})
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSelectorUpsertOne) SetDescriptionSelector(v string) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetDescriptionSelector(v)
	})
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateDescriptionSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateDescriptionSelector()
	})
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSelectorUpsertOne) ClearDescriptionSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.ClearDescriptionSelector()
	})
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSelectorUpsertOne) SetLinkSelector(v string) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetLinkSelector(v)
	})
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateLinkSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateLinkSelector()
	})
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSelectorUpsertOne) ClearLinkSelector() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.ClearLinkSelector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSelectorUpsertOne) SetCreatedAt(v time.Time) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateCreatedAt() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSelectorUpsertOne) SetUpdatedAt(v time.Time) *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertOne) UpdateUpdatedAt() *ScrapingSelectorUpsertOne {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScrapingSelectorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScrapingSelectorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScrapingSelectorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScrapingSelectorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScrapingSelectorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScrapingSelectorCreateBulk is the builder for creating many ScrapingSelector entities in bulk.
type ScrapingSelectorCreateBulk struct {
	config
	err      error
	builders []*ScrapingSelectorCreate
	conflict []sql.ConflictOption
}

// Save creates the ScrapingSelector entities in the database.
func (sscb *ScrapingSelectorCreateBulk) Save(ctx context.Context) ([]*ScrapingSelector, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ScrapingSelector, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScrapingSelectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ScrapingSelectorCreateBulk) SaveX(ctx context.Context) []*ScrapingSelector {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ScrapingSelectorCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ScrapingSelectorCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScrapingSelector.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScrapingSelectorUpsert) {
//			SetSelector(v+v).
//		}).
//		Exec(ctx)
func (sscb *ScrapingSelectorCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScrapingSelectorUpsertBulk {
	sscb.conflict = opts
	return &ScrapingSelectorUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *ScrapingSelectorCreateBulk) OnConflictColumns(columns ...string) *ScrapingSelectorUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &ScrapingSelectorUpsertBulk{
		create: sscb,
	}
}

// ScrapingSelectorUpsertBulk is the builder for "upsert"-ing
// a bulk of ScrapingSelector nodes.
type ScrapingSelectorUpsertBulk struct {
	create *ScrapingSelectorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scrapingselector.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScrapingSelectorUpsertBulk) UpdateNewValues() *ScrapingSelectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scrapingselector.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScrapingSelector.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScrapingSelectorUpsertBulk) Ignore() *ScrapingSelectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScrapingSelectorUpsertBulk) DoNothing() *ScrapingSelectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScrapingSelectorCreateBulk.OnConflict
// documentation for more info.
func (u *ScrapingSelectorUpsertBulk) Update(set func(*ScrapingSelectorUpsert)) *ScrapingSelectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScrapingSelectorUpsert{UpdateSet: update})
	}))
	return u
}

// SetSelector sets the "selector" field.
func (u *ScrapingSelectorUpsertBulk) SetSelector(v string) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateSelector()
	})
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSelectorUpsertBulk) SetInnerSelector(v string) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetInnerSelector(v)
	})
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateInnerSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateInnerSelector()
	})
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSelectorUpsertBulk) SetTitleSelector(v string) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetTitleSelector(v)
	})
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateTitleSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateTitleSelector()
	})
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSelectorUpsertBulk) SetDescriptionSelector(v string) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetDescriptionSelector(v)
	})
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateDescriptionSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateDescriptionSelector()
	})
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSelectorUpsertBulk) ClearDescriptionSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.ClearDescriptionSelector()
	})
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSelectorUpsertBulk) SetLinkSelector(v string) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetLinkSelector(v)
	})
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateLinkSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateLinkSelector()
	})
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSelectorUpsertBulk) ClearLinkSelector() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.ClearLinkSelector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSelectorUpsertBulk) SetCreatedAt(v time.Time) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateCreatedAt() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSelectorUpsertBulk) SetUpdatedAt(v time.Time) *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSelectorUpsertBulk) UpdateUpdatedAt() *ScrapingSelectorUpsertBulk {
	return u.Update(func(s *ScrapingSelectorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScrapingSelectorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScrapingSelectorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScrapingSelectorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScrapingSelectorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
