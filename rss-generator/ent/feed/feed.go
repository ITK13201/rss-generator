// Code generated by ent, DO NOT EDIT.

package feed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the feed type in the database.
	Label = "feed"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldIsTest holds the string denoting the is_test field in the database.
	FieldIsTest = "is_test"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// EdgeFeedItems holds the string denoting the feed_items edge name in mutations.
	EdgeFeedItems = "feed_items"
	// Table holds the table name of the feed in the database.
	Table = "feeds"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "feeds"
	// SiteInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SiteInverseTable = "sites"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "site_id"
	// FeedItemsTable is the table that holds the feed_items relation/edge.
	FeedItemsTable = "feed_items"
	// FeedItemsInverseTable is the table name for the FeedItem entity.
	// It exists in this package in order to avoid circular dependency with the "feeditem" package.
	FeedItemsInverseTable = "feed_items"
	// FeedItemsColumn is the table column denoting the feed_items relation/edge.
	FeedItemsColumn = "feed_id"
)

// Columns holds all SQL columns for feed fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldLink,
	FieldPublishedAt,
	FieldIsTest,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "feeds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"site_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// DefaultIsTest holds the default value on creation for the "is_test" field.
	DefaultIsTest bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Feed queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByIsTest orders the results by the is_test field.
func ByIsTest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTest, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeedItemsCount orders the results by feed_items count.
func ByFeedItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedItemsStep(), opts...)
	}
}

// ByFeedItems orders the results by feed_items terms.
func ByFeedItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
func newFeedItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FeedItemsTable, FeedItemsColumn),
	)
}
