// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/site"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
)

// TestFeedUpdate is the builder for updating TestFeed entities.
type TestFeedUpdate struct {
	config
	hooks    []Hook
	mutation *TestFeedMutation
}

// Where appends a list predicates to the TestFeedUpdate builder.
func (tfu *TestFeedUpdate) Where(ps ...predicate.TestFeed) *TestFeedUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetTitle sets the "title" field.
func (tfu *TestFeedUpdate) SetTitle(s string) *TestFeedUpdate {
	tfu.mutation.SetTitle(s)
	return tfu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tfu *TestFeedUpdate) SetNillableTitle(s *string) *TestFeedUpdate {
	if s != nil {
		tfu.SetTitle(*s)
	}
	return tfu
}

// SetDescription sets the "description" field.
func (tfu *TestFeedUpdate) SetDescription(s string) *TestFeedUpdate {
	tfu.mutation.SetDescription(s)
	return tfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfu *TestFeedUpdate) SetNillableDescription(s *string) *TestFeedUpdate {
	if s != nil {
		tfu.SetDescription(*s)
	}
	return tfu
}

// SetLink sets the "link" field.
func (tfu *TestFeedUpdate) SetLink(s string) *TestFeedUpdate {
	tfu.mutation.SetLink(s)
	return tfu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (tfu *TestFeedUpdate) SetNillableLink(s *string) *TestFeedUpdate {
	if s != nil {
		tfu.SetLink(*s)
	}
	return tfu
}

// SetPublishedAt sets the "published_at" field.
func (tfu *TestFeedUpdate) SetPublishedAt(t time.Time) *TestFeedUpdate {
	tfu.mutation.SetPublishedAt(t)
	return tfu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tfu *TestFeedUpdate) SetNillablePublishedAt(t *time.Time) *TestFeedUpdate {
	if t != nil {
		tfu.SetPublishedAt(*t)
	}
	return tfu
}

// SetCreatedAt sets the "created_at" field.
func (tfu *TestFeedUpdate) SetCreatedAt(t time.Time) *TestFeedUpdate {
	tfu.mutation.SetCreatedAt(t)
	return tfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfu *TestFeedUpdate) SetNillableCreatedAt(t *time.Time) *TestFeedUpdate {
	if t != nil {
		tfu.SetCreatedAt(*t)
	}
	return tfu
}

// SetUpdatedAt sets the "updated_at" field.
func (tfu *TestFeedUpdate) SetUpdatedAt(t time.Time) *TestFeedUpdate {
	tfu.mutation.SetUpdatedAt(t)
	return tfu
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (tfu *TestFeedUpdate) SetSiteID(id int) *TestFeedUpdate {
	tfu.mutation.SetSiteID(id)
	return tfu
}

// SetSite sets the "site" edge to the Site entity.
func (tfu *TestFeedUpdate) SetSite(s *Site) *TestFeedUpdate {
	return tfu.SetSiteID(s.ID)
}

// AddTestFeedItemIDs adds the "test_feed_items" edge to the TestFeedItem entity by IDs.
func (tfu *TestFeedUpdate) AddTestFeedItemIDs(ids ...int) *TestFeedUpdate {
	tfu.mutation.AddTestFeedItemIDs(ids...)
	return tfu
}

// AddTestFeedItems adds the "test_feed_items" edges to the TestFeedItem entity.
func (tfu *TestFeedUpdate) AddTestFeedItems(t ...*TestFeedItem) *TestFeedUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.AddTestFeedItemIDs(ids...)
}

// Mutation returns the TestFeedMutation object of the builder.
func (tfu *TestFeedUpdate) Mutation() *TestFeedMutation {
	return tfu.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (tfu *TestFeedUpdate) ClearSite() *TestFeedUpdate {
	tfu.mutation.ClearSite()
	return tfu
}

// ClearTestFeedItems clears all "test_feed_items" edges to the TestFeedItem entity.
func (tfu *TestFeedUpdate) ClearTestFeedItems() *TestFeedUpdate {
	tfu.mutation.ClearTestFeedItems()
	return tfu
}

// RemoveTestFeedItemIDs removes the "test_feed_items" edge to TestFeedItem entities by IDs.
func (tfu *TestFeedUpdate) RemoveTestFeedItemIDs(ids ...int) *TestFeedUpdate {
	tfu.mutation.RemoveTestFeedItemIDs(ids...)
	return tfu
}

// RemoveTestFeedItems removes "test_feed_items" edges to TestFeedItem entities.
func (tfu *TestFeedUpdate) RemoveTestFeedItems(t ...*TestFeedItem) *TestFeedUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.RemoveTestFeedItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TestFeedUpdate) Save(ctx context.Context) (int, error) {
	tfu.defaults()
	return withHooks(ctx, tfu.sqlSave, tfu.mutation, tfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TestFeedUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TestFeedUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TestFeedUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfu *TestFeedUpdate) defaults() {
	if _, ok := tfu.mutation.UpdatedAt(); !ok {
		v := testfeed.UpdateDefaultUpdatedAt()
		tfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfu *TestFeedUpdate) check() error {
	if v, ok := tfu.mutation.Title(); ok {
		if err := testfeed.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestFeed.title": %w`, err)}
		}
	}
	if v, ok := tfu.mutation.Description(); ok {
		if err := testfeed.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TestFeed.description": %w`, err)}
		}
	}
	if v, ok := tfu.mutation.Link(); ok {
		if err := testfeed.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "TestFeed.link": %w`, err)}
		}
	}
	if _, ok := tfu.mutation.SiteID(); tfu.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestFeed.site"`)
	}
	return nil
}

func (tfu *TestFeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testfeed.Table, testfeed.Columns, sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID))
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.Title(); ok {
		_spec.SetField(testfeed.FieldTitle, field.TypeString, value)
	}
	if value, ok := tfu.mutation.Description(); ok {
		_spec.SetField(testfeed.FieldDescription, field.TypeString, value)
	}
	if value, ok := tfu.mutation.Link(); ok {
		_spec.SetField(testfeed.FieldLink, field.TypeString, value)
	}
	if value, ok := tfu.mutation.PublishedAt(); ok {
		_spec.SetField(testfeed.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := tfu.mutation.CreatedAt(); ok {
		_spec.SetField(testfeed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tfu.mutation.UpdatedAt(); ok {
		_spec.SetField(testfeed.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfu.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeed.SiteTable,
			Columns: []string{testfeed.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeed.SiteTable,
			Columns: []string{testfeed.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfu.mutation.TestFeedItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.RemovedTestFeedItemsIDs(); len(nodes) > 0 && !tfu.mutation.TestFeedItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TestFeedItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfu.mutation.done = true
	return n, nil
}

// TestFeedUpdateOne is the builder for updating a single TestFeed entity.
type TestFeedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestFeedMutation
}

// SetTitle sets the "title" field.
func (tfuo *TestFeedUpdateOne) SetTitle(s string) *TestFeedUpdateOne {
	tfuo.mutation.SetTitle(s)
	return tfuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tfuo *TestFeedUpdateOne) SetNillableTitle(s *string) *TestFeedUpdateOne {
	if s != nil {
		tfuo.SetTitle(*s)
	}
	return tfuo
}

// SetDescription sets the "description" field.
func (tfuo *TestFeedUpdateOne) SetDescription(s string) *TestFeedUpdateOne {
	tfuo.mutation.SetDescription(s)
	return tfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfuo *TestFeedUpdateOne) SetNillableDescription(s *string) *TestFeedUpdateOne {
	if s != nil {
		tfuo.SetDescription(*s)
	}
	return tfuo
}

// SetLink sets the "link" field.
func (tfuo *TestFeedUpdateOne) SetLink(s string) *TestFeedUpdateOne {
	tfuo.mutation.SetLink(s)
	return tfuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (tfuo *TestFeedUpdateOne) SetNillableLink(s *string) *TestFeedUpdateOne {
	if s != nil {
		tfuo.SetLink(*s)
	}
	return tfuo
}

// SetPublishedAt sets the "published_at" field.
func (tfuo *TestFeedUpdateOne) SetPublishedAt(t time.Time) *TestFeedUpdateOne {
	tfuo.mutation.SetPublishedAt(t)
	return tfuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tfuo *TestFeedUpdateOne) SetNillablePublishedAt(t *time.Time) *TestFeedUpdateOne {
	if t != nil {
		tfuo.SetPublishedAt(*t)
	}
	return tfuo
}

// SetCreatedAt sets the "created_at" field.
func (tfuo *TestFeedUpdateOne) SetCreatedAt(t time.Time) *TestFeedUpdateOne {
	tfuo.mutation.SetCreatedAt(t)
	return tfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfuo *TestFeedUpdateOne) SetNillableCreatedAt(t *time.Time) *TestFeedUpdateOne {
	if t != nil {
		tfuo.SetCreatedAt(*t)
	}
	return tfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tfuo *TestFeedUpdateOne) SetUpdatedAt(t time.Time) *TestFeedUpdateOne {
	tfuo.mutation.SetUpdatedAt(t)
	return tfuo
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (tfuo *TestFeedUpdateOne) SetSiteID(id int) *TestFeedUpdateOne {
	tfuo.mutation.SetSiteID(id)
	return tfuo
}

// SetSite sets the "site" edge to the Site entity.
func (tfuo *TestFeedUpdateOne) SetSite(s *Site) *TestFeedUpdateOne {
	return tfuo.SetSiteID(s.ID)
}

// AddTestFeedItemIDs adds the "test_feed_items" edge to the TestFeedItem entity by IDs.
func (tfuo *TestFeedUpdateOne) AddTestFeedItemIDs(ids ...int) *TestFeedUpdateOne {
	tfuo.mutation.AddTestFeedItemIDs(ids...)
	return tfuo
}

// AddTestFeedItems adds the "test_feed_items" edges to the TestFeedItem entity.
func (tfuo *TestFeedUpdateOne) AddTestFeedItems(t ...*TestFeedItem) *TestFeedUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.AddTestFeedItemIDs(ids...)
}

// Mutation returns the TestFeedMutation object of the builder.
func (tfuo *TestFeedUpdateOne) Mutation() *TestFeedMutation {
	return tfuo.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (tfuo *TestFeedUpdateOne) ClearSite() *TestFeedUpdateOne {
	tfuo.mutation.ClearSite()
	return tfuo
}

// ClearTestFeedItems clears all "test_feed_items" edges to the TestFeedItem entity.
func (tfuo *TestFeedUpdateOne) ClearTestFeedItems() *TestFeedUpdateOne {
	tfuo.mutation.ClearTestFeedItems()
	return tfuo
}

// RemoveTestFeedItemIDs removes the "test_feed_items" edge to TestFeedItem entities by IDs.
func (tfuo *TestFeedUpdateOne) RemoveTestFeedItemIDs(ids ...int) *TestFeedUpdateOne {
	tfuo.mutation.RemoveTestFeedItemIDs(ids...)
	return tfuo
}

// RemoveTestFeedItems removes "test_feed_items" edges to TestFeedItem entities.
func (tfuo *TestFeedUpdateOne) RemoveTestFeedItems(t ...*TestFeedItem) *TestFeedUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.RemoveTestFeedItemIDs(ids...)
}

// Where appends a list predicates to the TestFeedUpdate builder.
func (tfuo *TestFeedUpdateOne) Where(ps ...predicate.TestFeed) *TestFeedUpdateOne {
	tfuo.mutation.Where(ps...)
	return tfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TestFeedUpdateOne) Select(field string, fields ...string) *TestFeedUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TestFeed entity.
func (tfuo *TestFeedUpdateOne) Save(ctx context.Context) (*TestFeed, error) {
	tfuo.defaults()
	return withHooks(ctx, tfuo.sqlSave, tfuo.mutation, tfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TestFeedUpdateOne) SaveX(ctx context.Context) *TestFeed {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TestFeedUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TestFeedUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfuo *TestFeedUpdateOne) defaults() {
	if _, ok := tfuo.mutation.UpdatedAt(); !ok {
		v := testfeed.UpdateDefaultUpdatedAt()
		tfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfuo *TestFeedUpdateOne) check() error {
	if v, ok := tfuo.mutation.Title(); ok {
		if err := testfeed.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestFeed.title": %w`, err)}
		}
	}
	if v, ok := tfuo.mutation.Description(); ok {
		if err := testfeed.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TestFeed.description": %w`, err)}
		}
	}
	if v, ok := tfuo.mutation.Link(); ok {
		if err := testfeed.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "TestFeed.link": %w`, err)}
		}
	}
	if _, ok := tfuo.mutation.SiteID(); tfuo.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestFeed.site"`)
	}
	return nil
}

func (tfuo *TestFeedUpdateOne) sqlSave(ctx context.Context) (_node *TestFeed, err error) {
	if err := tfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testfeed.Table, testfeed.Columns, sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID))
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestFeed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testfeed.FieldID)
		for _, f := range fields {
			if !testfeed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testfeed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.Title(); ok {
		_spec.SetField(testfeed.FieldTitle, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.Description(); ok {
		_spec.SetField(testfeed.FieldDescription, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.Link(); ok {
		_spec.SetField(testfeed.FieldLink, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.PublishedAt(); ok {
		_spec.SetField(testfeed.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := tfuo.mutation.CreatedAt(); ok {
		_spec.SetField(testfeed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testfeed.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfuo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeed.SiteTable,
			Columns: []string{testfeed.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeed.SiteTable,
			Columns: []string{testfeed.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfuo.mutation.TestFeedItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.RemovedTestFeedItemsIDs(); len(nodes) > 0 && !tfuo.mutation.TestFeedItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TestFeedItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testfeed.TestFeedItemsTable,
			Columns: []string{testfeed.TestFeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestFeed{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfuo.mutation.done = true
	return _node, nil
}
