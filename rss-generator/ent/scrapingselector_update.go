// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/scrapingselector"
	"github.com/ITK13201/rss-generator/ent/site"
)

// ScrapingSelectorUpdate is the builder for updating ScrapingSelector entities.
type ScrapingSelectorUpdate struct {
	config
	hooks    []Hook
	mutation *ScrapingSelectorMutation
}

// Where appends a list predicates to the ScrapingSelectorUpdate builder.
func (ssu *ScrapingSelectorUpdate) Where(ps ...predicate.ScrapingSelector) *ScrapingSelectorUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetSelector sets the "selector" field.
func (ssu *ScrapingSelectorUpdate) SetSelector(s string) *ScrapingSelectorUpdate {
	ssu.mutation.SetSelector(s)
	return ssu
}

// SetNillableSelector sets the "selector" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableSelector(s *string) *ScrapingSelectorUpdate {
	if s != nil {
		ssu.SetSelector(*s)
	}
	return ssu
}

// SetInnerSelector sets the "inner_selector" field.
func (ssu *ScrapingSelectorUpdate) SetInnerSelector(s string) *ScrapingSelectorUpdate {
	ssu.mutation.SetInnerSelector(s)
	return ssu
}

// SetNillableInnerSelector sets the "inner_selector" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableInnerSelector(s *string) *ScrapingSelectorUpdate {
	if s != nil {
		ssu.SetInnerSelector(*s)
	}
	return ssu
}

// SetTitleSelector sets the "title_selector" field.
func (ssu *ScrapingSelectorUpdate) SetTitleSelector(s string) *ScrapingSelectorUpdate {
	ssu.mutation.SetTitleSelector(s)
	return ssu
}

// SetNillableTitleSelector sets the "title_selector" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableTitleSelector(s *string) *ScrapingSelectorUpdate {
	if s != nil {
		ssu.SetTitleSelector(*s)
	}
	return ssu
}

// SetDescriptionSelector sets the "description_selector" field.
func (ssu *ScrapingSelectorUpdate) SetDescriptionSelector(s string) *ScrapingSelectorUpdate {
	ssu.mutation.SetDescriptionSelector(s)
	return ssu
}

// SetNillableDescriptionSelector sets the "description_selector" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableDescriptionSelector(s *string) *ScrapingSelectorUpdate {
	if s != nil {
		ssu.SetDescriptionSelector(*s)
	}
	return ssu
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (ssu *ScrapingSelectorUpdate) ClearDescriptionSelector() *ScrapingSelectorUpdate {
	ssu.mutation.ClearDescriptionSelector()
	return ssu
}

// SetLinkSelector sets the "link_selector" field.
func (ssu *ScrapingSelectorUpdate) SetLinkSelector(s string) *ScrapingSelectorUpdate {
	ssu.mutation.SetLinkSelector(s)
	return ssu
}

// SetNillableLinkSelector sets the "link_selector" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableLinkSelector(s *string) *ScrapingSelectorUpdate {
	if s != nil {
		ssu.SetLinkSelector(*s)
	}
	return ssu
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (ssu *ScrapingSelectorUpdate) ClearLinkSelector() *ScrapingSelectorUpdate {
	ssu.mutation.ClearLinkSelector()
	return ssu
}

// SetCreatedAt sets the "created_at" field.
func (ssu *ScrapingSelectorUpdate) SetCreatedAt(t time.Time) *ScrapingSelectorUpdate {
	ssu.mutation.SetCreatedAt(t)
	return ssu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssu *ScrapingSelectorUpdate) SetNillableCreatedAt(t *time.Time) *ScrapingSelectorUpdate {
	if t != nil {
		ssu.SetCreatedAt(*t)
	}
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *ScrapingSelectorUpdate) SetUpdatedAt(t time.Time) *ScrapingSelectorUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (ssu *ScrapingSelectorUpdate) SetSiteID(id int) *ScrapingSelectorUpdate {
	ssu.mutation.SetSiteID(id)
	return ssu
}

// SetSite sets the "site" edge to the Site entity.
func (ssu *ScrapingSelectorUpdate) SetSite(s *Site) *ScrapingSelectorUpdate {
	return ssu.SetSiteID(s.ID)
}

// Mutation returns the ScrapingSelectorMutation object of the builder.
func (ssu *ScrapingSelectorUpdate) Mutation() *ScrapingSelectorMutation {
	return ssu.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (ssu *ScrapingSelectorUpdate) ClearSite() *ScrapingSelectorUpdate {
	ssu.mutation.ClearSite()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *ScrapingSelectorUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ScrapingSelectorUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ScrapingSelectorUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ScrapingSelectorUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *ScrapingSelectorUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := scrapingselector.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *ScrapingSelectorUpdate) check() error {
	if v, ok := ssu.mutation.Selector(); ok {
		if err := scrapingselector.SelectorValidator(v); err != nil {
			return &ValidationError{Name: "selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.selector": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.InnerSelector(); ok {
		if err := scrapingselector.InnerSelectorValidator(v); err != nil {
			return &ValidationError{Name: "inner_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.inner_selector": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.TitleSelector(); ok {
		if err := scrapingselector.TitleSelectorValidator(v); err != nil {
			return &ValidationError{Name: "title_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.title_selector": %w`, err)}
		}
	}
	if _, ok := ssu.mutation.SiteID(); ssu.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScrapingSelector.site"`)
	}
	return nil
}

func (ssu *ScrapingSelectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scrapingselector.Table, scrapingselector.Columns, sqlgraph.NewFieldSpec(scrapingselector.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Selector(); ok {
		_spec.SetField(scrapingselector.FieldSelector, field.TypeString, value)
	}
	if value, ok := ssu.mutation.InnerSelector(); ok {
		_spec.SetField(scrapingselector.FieldInnerSelector, field.TypeString, value)
	}
	if value, ok := ssu.mutation.TitleSelector(); ok {
		_spec.SetField(scrapingselector.FieldTitleSelector, field.TypeString, value)
	}
	if value, ok := ssu.mutation.DescriptionSelector(); ok {
		_spec.SetField(scrapingselector.FieldDescriptionSelector, field.TypeString, value)
	}
	if ssu.mutation.DescriptionSelectorCleared() {
		_spec.ClearField(scrapingselector.FieldDescriptionSelector, field.TypeString)
	}
	if value, ok := ssu.mutation.LinkSelector(); ok {
		_spec.SetField(scrapingselector.FieldLinkSelector, field.TypeString, value)
	}
	if ssu.mutation.LinkSelectorCleared() {
		_spec.ClearField(scrapingselector.FieldLinkSelector, field.TypeString)
	}
	if value, ok := ssu.mutation.CreatedAt(); ok {
		_spec.SetField(scrapingselector.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(scrapingselector.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssu.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scrapingselector.SiteTable,
			Columns: []string{scrapingselector.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scrapingselector.SiteTable,
			Columns: []string{scrapingselector.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scrapingselector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// ScrapingSelectorUpdateOne is the builder for updating a single ScrapingSelector entity.
type ScrapingSelectorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScrapingSelectorMutation
}

// SetSelector sets the "selector" field.
func (ssuo *ScrapingSelectorUpdateOne) SetSelector(s string) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetSelector(s)
	return ssuo
}

// SetNillableSelector sets the "selector" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableSelector(s *string) *ScrapingSelectorUpdateOne {
	if s != nil {
		ssuo.SetSelector(*s)
	}
	return ssuo
}

// SetInnerSelector sets the "inner_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) SetInnerSelector(s string) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetInnerSelector(s)
	return ssuo
}

// SetNillableInnerSelector sets the "inner_selector" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableInnerSelector(s *string) *ScrapingSelectorUpdateOne {
	if s != nil {
		ssuo.SetInnerSelector(*s)
	}
	return ssuo
}

// SetTitleSelector sets the "title_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) SetTitleSelector(s string) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetTitleSelector(s)
	return ssuo
}

// SetNillableTitleSelector sets the "title_selector" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableTitleSelector(s *string) *ScrapingSelectorUpdateOne {
	if s != nil {
		ssuo.SetTitleSelector(*s)
	}
	return ssuo
}

// SetDescriptionSelector sets the "description_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) SetDescriptionSelector(s string) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetDescriptionSelector(s)
	return ssuo
}

// SetNillableDescriptionSelector sets the "description_selector" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableDescriptionSelector(s *string) *ScrapingSelectorUpdateOne {
	if s != nil {
		ssuo.SetDescriptionSelector(*s)
	}
	return ssuo
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) ClearDescriptionSelector() *ScrapingSelectorUpdateOne {
	ssuo.mutation.ClearDescriptionSelector()
	return ssuo
}

// SetLinkSelector sets the "link_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) SetLinkSelector(s string) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetLinkSelector(s)
	return ssuo
}

// SetNillableLinkSelector sets the "link_selector" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableLinkSelector(s *string) *ScrapingSelectorUpdateOne {
	if s != nil {
		ssuo.SetLinkSelector(*s)
	}
	return ssuo
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (ssuo *ScrapingSelectorUpdateOne) ClearLinkSelector() *ScrapingSelectorUpdateOne {
	ssuo.mutation.ClearLinkSelector()
	return ssuo
}

// SetCreatedAt sets the "created_at" field.
func (ssuo *ScrapingSelectorUpdateOne) SetCreatedAt(t time.Time) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetCreatedAt(t)
	return ssuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssuo *ScrapingSelectorUpdateOne) SetNillableCreatedAt(t *time.Time) *ScrapingSelectorUpdateOne {
	if t != nil {
		ssuo.SetCreatedAt(*t)
	}
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *ScrapingSelectorUpdateOne) SetUpdatedAt(t time.Time) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (ssuo *ScrapingSelectorUpdateOne) SetSiteID(id int) *ScrapingSelectorUpdateOne {
	ssuo.mutation.SetSiteID(id)
	return ssuo
}

// SetSite sets the "site" edge to the Site entity.
func (ssuo *ScrapingSelectorUpdateOne) SetSite(s *Site) *ScrapingSelectorUpdateOne {
	return ssuo.SetSiteID(s.ID)
}

// Mutation returns the ScrapingSelectorMutation object of the builder.
func (ssuo *ScrapingSelectorUpdateOne) Mutation() *ScrapingSelectorMutation {
	return ssuo.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (ssuo *ScrapingSelectorUpdateOne) ClearSite() *ScrapingSelectorUpdateOne {
	ssuo.mutation.ClearSite()
	return ssuo
}

// Where appends a list predicates to the ScrapingSelectorUpdate builder.
func (ssuo *ScrapingSelectorUpdateOne) Where(ps ...predicate.ScrapingSelector) *ScrapingSelectorUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *ScrapingSelectorUpdateOne) Select(field string, fields ...string) *ScrapingSelectorUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated ScrapingSelector entity.
func (ssuo *ScrapingSelectorUpdateOne) Save(ctx context.Context) (*ScrapingSelector, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ScrapingSelectorUpdateOne) SaveX(ctx context.Context) *ScrapingSelector {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ScrapingSelectorUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ScrapingSelectorUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *ScrapingSelectorUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := scrapingselector.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *ScrapingSelectorUpdateOne) check() error {
	if v, ok := ssuo.mutation.Selector(); ok {
		if err := scrapingselector.SelectorValidator(v); err != nil {
			return &ValidationError{Name: "selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.selector": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.InnerSelector(); ok {
		if err := scrapingselector.InnerSelectorValidator(v); err != nil {
			return &ValidationError{Name: "inner_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.inner_selector": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.TitleSelector(); ok {
		if err := scrapingselector.TitleSelectorValidator(v); err != nil {
			return &ValidationError{Name: "title_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSelector.title_selector": %w`, err)}
		}
	}
	if _, ok := ssuo.mutation.SiteID(); ssuo.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScrapingSelector.site"`)
	}
	return nil
}

func (ssuo *ScrapingSelectorUpdateOne) sqlSave(ctx context.Context) (_node *ScrapingSelector, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scrapingselector.Table, scrapingselector.Columns, sqlgraph.NewFieldSpec(scrapingselector.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScrapingSelector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scrapingselector.FieldID)
		for _, f := range fields {
			if !scrapingselector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scrapingselector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Selector(); ok {
		_spec.SetField(scrapingselector.FieldSelector, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.InnerSelector(); ok {
		_spec.SetField(scrapingselector.FieldInnerSelector, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.TitleSelector(); ok {
		_spec.SetField(scrapingselector.FieldTitleSelector, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.DescriptionSelector(); ok {
		_spec.SetField(scrapingselector.FieldDescriptionSelector, field.TypeString, value)
	}
	if ssuo.mutation.DescriptionSelectorCleared() {
		_spec.ClearField(scrapingselector.FieldDescriptionSelector, field.TypeString)
	}
	if value, ok := ssuo.mutation.LinkSelector(); ok {
		_spec.SetField(scrapingselector.FieldLinkSelector, field.TypeString, value)
	}
	if ssuo.mutation.LinkSelectorCleared() {
		_spec.ClearField(scrapingselector.FieldLinkSelector, field.TypeString)
	}
	if value, ok := ssuo.mutation.CreatedAt(); ok {
		_spec.SetField(scrapingselector.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scrapingselector.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssuo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scrapingselector.SiteTable,
			Columns: []string{scrapingselector.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scrapingselector.SiteTable,
			Columns: []string{scrapingselector.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScrapingSelector{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scrapingselector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
