// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/site"
)

// SiteUpdate is the builder for updating Site entities.
type SiteUpdate struct {
	config
	hooks    []Hook
	mutation *SiteMutation
}

// Where appends a list predicates to the SiteUpdate builder.
func (su *SiteUpdate) Where(ps ...predicate.Site) *SiteUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSlug sets the "slug" field.
func (su *SiteUpdate) SetSlug(s string) *SiteUpdate {
	su.mutation.SetSlug(s)
	return su
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (su *SiteUpdate) SetNillableSlug(s *string) *SiteUpdate {
	if s != nil {
		su.SetSlug(*s)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *SiteUpdate) SetTitle(s string) *SiteUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SiteUpdate) SetNillableTitle(s *string) *SiteUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SiteUpdate) SetDescription(s string) *SiteUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SiteUpdate) SetNillableDescription(s *string) *SiteUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SiteUpdate) ClearDescription() *SiteUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetURL sets the "url" field.
func (su *SiteUpdate) SetURL(s string) *SiteUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SiteUpdate) SetNillableURL(s *string) *SiteUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SiteUpdate) SetCreatedAt(t time.Time) *SiteUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SiteUpdate) SetNillableCreatedAt(t *time.Time) *SiteUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SiteUpdate) SetUpdatedAt(t time.Time) *SiteUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the SiteMutation object of the builder.
func (su *SiteUpdate) Mutation() *SiteMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SiteUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SiteUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SiteUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SiteUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SiteUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := site.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SiteUpdate) check() error {
	if v, ok := su.mutation.Slug(); ok {
		if err := site.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Site.slug": %w`, err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := site.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Site.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.URL(); ok {
		if err := site.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Site.url": %w`, err)}
		}
	}
	return nil
}

func (su *SiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Slug(); ok {
		_spec.SetField(site.FieldSlug, field.TypeString, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(site.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(site.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SiteUpdateOne is the builder for updating a single Site entity.
type SiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteMutation
}

// SetSlug sets the "slug" field.
func (suo *SiteUpdateOne) SetSlug(s string) *SiteUpdateOne {
	suo.mutation.SetSlug(s)
	return suo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableSlug(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetSlug(*s)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *SiteUpdateOne) SetTitle(s string) *SiteUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableTitle(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SiteUpdateOne) SetDescription(s string) *SiteUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableDescription(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SiteUpdateOne) ClearDescription() *SiteUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetURL sets the "url" field.
func (suo *SiteUpdateOne) SetURL(s string) *SiteUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableURL(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SiteUpdateOne) SetCreatedAt(t time.Time) *SiteUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableCreatedAt(t *time.Time) *SiteUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SiteUpdateOne) SetUpdatedAt(t time.Time) *SiteUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the SiteMutation object of the builder.
func (suo *SiteUpdateOne) Mutation() *SiteMutation {
	return suo.mutation
}

// Where appends a list predicates to the SiteUpdate builder.
func (suo *SiteUpdateOne) Where(ps ...predicate.Site) *SiteUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SiteUpdateOne) Select(field string, fields ...string) *SiteUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Site entity.
func (suo *SiteUpdateOne) Save(ctx context.Context) (*Site, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SiteUpdateOne) SaveX(ctx context.Context) *Site {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SiteUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SiteUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SiteUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := site.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SiteUpdateOne) check() error {
	if v, ok := suo.mutation.Slug(); ok {
		if err := site.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Site.slug": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := site.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Site.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.URL(); ok {
		if err := site.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Site.url": %w`, err)}
		}
	}
	return nil
}

func (suo *SiteUpdateOne) sqlSave(ctx context.Context) (_node *Site, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Site.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, site.FieldID)
		for _, f := range fields {
			if !site.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != site.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Slug(); ok {
		_spec.SetField(site.FieldSlug, field.TypeString, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(site.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(site.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Site{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
