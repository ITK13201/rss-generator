// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/feed"
	"github.com/ITK13201/rss-generator/ent/feeditem"
	"github.com/ITK13201/rss-generator/ent/site"
	"github.com/google/uuid"
)

// FeedCreate is the builder for creating a Feed entity.
type FeedCreate struct {
	config
	mutation *FeedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (fc *FeedCreate) SetTitle(s string) *FeedCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FeedCreate) SetDescription(s string) *FeedCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetLink sets the "link" field.
func (fc *FeedCreate) SetLink(s string) *FeedCreate {
	fc.mutation.SetLink(s)
	return fc
}

// SetPublishedAt sets the "published_at" field.
func (fc *FeedCreate) SetPublishedAt(t time.Time) *FeedCreate {
	fc.mutation.SetPublishedAt(t)
	return fc
}

// SetIsTest sets the "is_test" field.
func (fc *FeedCreate) SetIsTest(b bool) *FeedCreate {
	fc.mutation.SetIsTest(b)
	return fc
}

// SetNillableIsTest sets the "is_test" field if the given value is not nil.
func (fc *FeedCreate) SetNillableIsTest(b *bool) *FeedCreate {
	if b != nil {
		fc.SetIsTest(*b)
	}
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedCreate) SetCreatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableCreatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedCreate) SetUpdatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableUpdatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeedCreate) SetID(u uuid.UUID) *FeedCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FeedCreate) SetNillableID(u *uuid.UUID) *FeedCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (fc *FeedCreate) SetSiteID(id int) *FeedCreate {
	fc.mutation.SetSiteID(id)
	return fc
}

// SetSite sets the "site" edge to the Site entity.
func (fc *FeedCreate) SetSite(s *Site) *FeedCreate {
	return fc.SetSiteID(s.ID)
}

// AddFeedItemIDs adds the "feed_items" edge to the FeedItem entity by IDs.
func (fc *FeedCreate) AddFeedItemIDs(ids ...int) *FeedCreate {
	fc.mutation.AddFeedItemIDs(ids...)
	return fc
}

// AddFeedItems adds the "feed_items" edges to the FeedItem entity.
func (fc *FeedCreate) AddFeedItems(f ...*FeedItem) *FeedCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFeedItemIDs(ids...)
}

// Mutation returns the FeedMutation object of the builder.
func (fc *FeedCreate) Mutation() *FeedMutation {
	return fc.mutation
}

// Save creates the Feed in the database.
func (fc *FeedCreate) Save(ctx context.Context) (*Feed, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedCreate) SaveX(ctx context.Context) *Feed {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedCreate) defaults() {
	if _, ok := fc.mutation.IsTest(); !ok {
		v := feed.DefaultIsTest
		fc.mutation.SetIsTest(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := feed.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := feed.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := feed.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedCreate) check() error {
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Feed.title"`)}
	}
	if v, ok := fc.mutation.Title(); ok {
		if err := feed.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Feed.title": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Feed.description"`)}
	}
	if v, ok := fc.mutation.Description(); ok {
		if err := feed.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Feed.description": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Feed.link"`)}
	}
	if v, ok := fc.mutation.Link(); ok {
		if err := feed.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Feed.link": %w`, err)}
		}
	}
	if _, ok := fc.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "Feed.published_at"`)}
	}
	if _, ok := fc.mutation.IsTest(); !ok {
		return &ValidationError{Name: "is_test", err: errors.New(`ent: missing required field "Feed.is_test"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Feed.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Feed.updated_at"`)}
	}
	if _, ok := fc.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site", err: errors.New(`ent: missing required edge "Feed.site"`)}
	}
	return nil
}

func (fc *FeedCreate) sqlSave(ctx context.Context) (*Feed, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeedCreate) createSpec() (*Feed, *sqlgraph.CreateSpec) {
	var (
		_node = &Feed{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(feed.Table, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(feed.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(feed.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.Link(); ok {
		_spec.SetField(feed.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := fc.mutation.PublishedAt(); ok {
		_spec.SetField(feed.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := fc.mutation.IsTest(); ok {
		_spec.SetField(feed.FieldIsTest, field.TypeBool, value)
		_node.IsTest = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feed.SiteTable,
			Columns: []string{feed.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.site_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FeedItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feed.FeedItemsTable,
			Columns: []string{feed.FeedItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feed.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (fc *FeedCreate) OnConflict(opts ...sql.ConflictOption) *FeedUpsertOne {
	fc.conflict = opts
	return &FeedUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FeedCreate) OnConflictColumns(columns ...string) *FeedUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeedUpsertOne{
		create: fc,
	}
}

type (
	// FeedUpsertOne is the builder for "upsert"-ing
	//  one Feed node.
	FeedUpsertOne struct {
		create *FeedCreate
	}

	// FeedUpsert is the "OnConflict" setter.
	FeedUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *FeedUpsert) SetTitle(v string) *FeedUpsert {
	u.Set(feed.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FeedUpsert) UpdateTitle() *FeedUpsert {
	u.SetExcluded(feed.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *FeedUpsert) SetDescription(v string) *FeedUpsert {
	u.Set(feed.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedUpsert) UpdateDescription() *FeedUpsert {
	u.SetExcluded(feed.FieldDescription)
	return u
}

// SetLink sets the "link" field.
func (u *FeedUpsert) SetLink(v string) *FeedUpsert {
	u.Set(feed.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *FeedUpsert) UpdateLink() *FeedUpsert {
	u.SetExcluded(feed.FieldLink)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *FeedUpsert) SetPublishedAt(v time.Time) *FeedUpsert {
	u.Set(feed.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *FeedUpsert) UpdatePublishedAt() *FeedUpsert {
	u.SetExcluded(feed.FieldPublishedAt)
	return u
}

// SetIsTest sets the "is_test" field.
func (u *FeedUpsert) SetIsTest(v bool) *FeedUpsert {
	u.Set(feed.FieldIsTest, v)
	return u
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *FeedUpsert) UpdateIsTest() *FeedUpsert {
	u.SetExcluded(feed.FieldIsTest)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsert) SetCreatedAt(v time.Time) *FeedUpsert {
	u.Set(feed.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsert) UpdateCreatedAt() *FeedUpsert {
	u.SetExcluded(feed.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsert) SetUpdatedAt(v time.Time) *FeedUpsert {
	u.Set(feed.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsert) UpdateUpdatedAt() *FeedUpsert {
	u.SetExcluded(feed.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedUpsertOne) UpdateNewValues() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feed.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedUpsertOne) Ignore() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedUpsertOne) DoNothing() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedCreate.OnConflict
// documentation for more info.
func (u *FeedUpsertOne) Update(set func(*FeedUpsert)) *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *FeedUpsertOne) SetTitle(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateTitle() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FeedUpsertOne) SetDescription(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateDescription() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateDescription()
	})
}

// SetLink sets the "link" field.
func (u *FeedUpsertOne) SetLink(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateLink() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateLink()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *FeedUpsertOne) SetPublishedAt(v time.Time) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdatePublishedAt() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdatePublishedAt()
	})
}

// SetIsTest sets the "is_test" field.
func (u *FeedUpsertOne) SetIsTest(v bool) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetIsTest(v)
	})
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateIsTest() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateIsTest()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsertOne) SetCreatedAt(v time.Time) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateCreatedAt() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsertOne) SetUpdatedAt(v time.Time) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateUpdatedAt() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FeedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FeedUpsertOne.ID is not supported by MySQL driver. Use FeedUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedCreateBulk is the builder for creating many Feed entities in bulk.
type FeedCreateBulk struct {
	config
	err      error
	builders []*FeedCreate
	conflict []sql.ConflictOption
}

// Save creates the Feed entities in the database.
func (fcb *FeedCreateBulk) Save(ctx context.Context) ([]*Feed, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feed, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedCreateBulk) SaveX(ctx context.Context) []*Feed {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feed.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (fcb *FeedCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedUpsertBulk {
	fcb.conflict = opts
	return &FeedUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FeedCreateBulk) OnConflictColumns(columns ...string) *FeedUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeedUpsertBulk{
		create: fcb,
	}
}

// FeedUpsertBulk is the builder for "upsert"-ing
// a bulk of Feed nodes.
type FeedUpsertBulk struct {
	create *FeedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedUpsertBulk) UpdateNewValues() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feed.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedUpsertBulk) Ignore() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedUpsertBulk) DoNothing() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedCreateBulk.OnConflict
// documentation for more info.
func (u *FeedUpsertBulk) Update(set func(*FeedUpsert)) *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *FeedUpsertBulk) SetTitle(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateTitle() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FeedUpsertBulk) SetDescription(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateDescription() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateDescription()
	})
}

// SetLink sets the "link" field.
func (u *FeedUpsertBulk) SetLink(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateLink() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateLink()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *FeedUpsertBulk) SetPublishedAt(v time.Time) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdatePublishedAt() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdatePublishedAt()
	})
}

// SetIsTest sets the "is_test" field.
func (u *FeedUpsertBulk) SetIsTest(v bool) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetIsTest(v)
	})
}

// UpdateIsTest sets the "is_test" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateIsTest() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateIsTest()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsertBulk) SetCreatedAt(v time.Time) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateCreatedAt() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsertBulk) SetUpdatedAt(v time.Time) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateUpdatedAt() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FeedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
