// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/scrapingsetting"
	"github.com/ITK13201/rss-generator/ent/site"
)

// ScrapingSettingCreate is the builder for creating a ScrapingSetting entity.
type ScrapingSettingCreate struct {
	config
	mutation *ScrapingSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSelector sets the "selector" field.
func (ssc *ScrapingSettingCreate) SetSelector(s string) *ScrapingSettingCreate {
	ssc.mutation.SetSelector(s)
	return ssc
}

// SetInnerSelector sets the "inner_selector" field.
func (ssc *ScrapingSettingCreate) SetInnerSelector(s string) *ScrapingSettingCreate {
	ssc.mutation.SetInnerSelector(s)
	return ssc
}

// SetTitleSelector sets the "title_selector" field.
func (ssc *ScrapingSettingCreate) SetTitleSelector(s string) *ScrapingSettingCreate {
	ssc.mutation.SetTitleSelector(s)
	return ssc
}

// SetDescriptionSelector sets the "description_selector" field.
func (ssc *ScrapingSettingCreate) SetDescriptionSelector(s string) *ScrapingSettingCreate {
	ssc.mutation.SetDescriptionSelector(s)
	return ssc
}

// SetNillableDescriptionSelector sets the "description_selector" field if the given value is not nil.
func (ssc *ScrapingSettingCreate) SetNillableDescriptionSelector(s *string) *ScrapingSettingCreate {
	if s != nil {
		ssc.SetDescriptionSelector(*s)
	}
	return ssc
}

// SetLinkSelector sets the "link_selector" field.
func (ssc *ScrapingSettingCreate) SetLinkSelector(s string) *ScrapingSettingCreate {
	ssc.mutation.SetLinkSelector(s)
	return ssc
}

// SetNillableLinkSelector sets the "link_selector" field if the given value is not nil.
func (ssc *ScrapingSettingCreate) SetNillableLinkSelector(s *string) *ScrapingSettingCreate {
	if s != nil {
		ssc.SetLinkSelector(*s)
	}
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *ScrapingSettingCreate) SetCreatedAt(t time.Time) *ScrapingSettingCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *ScrapingSettingCreate) SetNillableCreatedAt(t *time.Time) *ScrapingSettingCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *ScrapingSettingCreate) SetUpdatedAt(t time.Time) *ScrapingSettingCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *ScrapingSettingCreate) SetNillableUpdatedAt(t *time.Time) *ScrapingSettingCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *ScrapingSettingCreate) SetID(i int) *ScrapingSettingCreate {
	ssc.mutation.SetID(i)
	return ssc
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (ssc *ScrapingSettingCreate) SetSiteID(id int) *ScrapingSettingCreate {
	ssc.mutation.SetSiteID(id)
	return ssc
}

// SetSite sets the "site" edge to the Site entity.
func (ssc *ScrapingSettingCreate) SetSite(s *Site) *ScrapingSettingCreate {
	return ssc.SetSiteID(s.ID)
}

// Mutation returns the ScrapingSettingMutation object of the builder.
func (ssc *ScrapingSettingCreate) Mutation() *ScrapingSettingMutation {
	return ssc.mutation
}

// Save creates the ScrapingSetting in the database.
func (ssc *ScrapingSettingCreate) Save(ctx context.Context) (*ScrapingSetting, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ScrapingSettingCreate) SaveX(ctx context.Context) *ScrapingSetting {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ScrapingSettingCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ScrapingSettingCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *ScrapingSettingCreate) defaults() {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := scrapingsetting.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := scrapingsetting.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ScrapingSettingCreate) check() error {
	if _, ok := ssc.mutation.Selector(); !ok {
		return &ValidationError{Name: "selector", err: errors.New(`ent: missing required field "ScrapingSetting.selector"`)}
	}
	if v, ok := ssc.mutation.Selector(); ok {
		if err := scrapingsetting.SelectorValidator(v); err != nil {
			return &ValidationError{Name: "selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSetting.selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.InnerSelector(); !ok {
		return &ValidationError{Name: "inner_selector", err: errors.New(`ent: missing required field "ScrapingSetting.inner_selector"`)}
	}
	if v, ok := ssc.mutation.InnerSelector(); ok {
		if err := scrapingsetting.InnerSelectorValidator(v); err != nil {
			return &ValidationError{Name: "inner_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSetting.inner_selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.TitleSelector(); !ok {
		return &ValidationError{Name: "title_selector", err: errors.New(`ent: missing required field "ScrapingSetting.title_selector"`)}
	}
	if v, ok := ssc.mutation.TitleSelector(); ok {
		if err := scrapingsetting.TitleSelectorValidator(v); err != nil {
			return &ValidationError{Name: "title_selector", err: fmt.Errorf(`ent: validator failed for field "ScrapingSetting.title_selector": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScrapingSetting.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScrapingSetting.updated_at"`)}
	}
	if _, ok := ssc.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site", err: errors.New(`ent: missing required edge "ScrapingSetting.site"`)}
	}
	return nil
}

func (ssc *ScrapingSettingCreate) sqlSave(ctx context.Context) (*ScrapingSetting, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *ScrapingSettingCreate) createSpec() (*ScrapingSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ScrapingSetting{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(scrapingsetting.Table, sqlgraph.NewFieldSpec(scrapingsetting.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.Selector(); ok {
		_spec.SetField(scrapingsetting.FieldSelector, field.TypeString, value)
		_node.Selector = value
	}
	if value, ok := ssc.mutation.InnerSelector(); ok {
		_spec.SetField(scrapingsetting.FieldInnerSelector, field.TypeString, value)
		_node.InnerSelector = value
	}
	if value, ok := ssc.mutation.TitleSelector(); ok {
		_spec.SetField(scrapingsetting.FieldTitleSelector, field.TypeString, value)
		_node.TitleSelector = value
	}
	if value, ok := ssc.mutation.DescriptionSelector(); ok {
		_spec.SetField(scrapingsetting.FieldDescriptionSelector, field.TypeString, value)
		_node.DescriptionSelector = value
	}
	if value, ok := ssc.mutation.LinkSelector(); ok {
		_spec.SetField(scrapingsetting.FieldLinkSelector, field.TypeString, value)
		_node.LinkSelector = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(scrapingsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(scrapingsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ssc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scrapingsetting.SiteTable,
			Columns: []string{scrapingsetting.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.site_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScrapingSetting.Create().
//		SetSelector(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScrapingSettingUpsert) {
//			SetSelector(v+v).
//		}).
//		Exec(ctx)
func (ssc *ScrapingSettingCreate) OnConflict(opts ...sql.ConflictOption) *ScrapingSettingUpsertOne {
	ssc.conflict = opts
	return &ScrapingSettingUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *ScrapingSettingCreate) OnConflictColumns(columns ...string) *ScrapingSettingUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &ScrapingSettingUpsertOne{
		create: ssc,
	}
}

type (
	// ScrapingSettingUpsertOne is the builder for "upsert"-ing
	//  one ScrapingSetting node.
	ScrapingSettingUpsertOne struct {
		create *ScrapingSettingCreate
	}

	// ScrapingSettingUpsert is the "OnConflict" setter.
	ScrapingSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetSelector sets the "selector" field.
func (u *ScrapingSettingUpsert) SetSelector(v string) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldSelector, v)
	return u
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateSelector() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldSelector)
	return u
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSettingUpsert) SetInnerSelector(v string) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldInnerSelector, v)
	return u
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateInnerSelector() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldInnerSelector)
	return u
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSettingUpsert) SetTitleSelector(v string) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldTitleSelector, v)
	return u
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateTitleSelector() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldTitleSelector)
	return u
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSettingUpsert) SetDescriptionSelector(v string) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldDescriptionSelector, v)
	return u
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateDescriptionSelector() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldDescriptionSelector)
	return u
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSettingUpsert) ClearDescriptionSelector() *ScrapingSettingUpsert {
	u.SetNull(scrapingsetting.FieldDescriptionSelector)
	return u
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSettingUpsert) SetLinkSelector(v string) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldLinkSelector, v)
	return u
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateLinkSelector() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldLinkSelector)
	return u
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSettingUpsert) ClearLinkSelector() *ScrapingSettingUpsert {
	u.SetNull(scrapingsetting.FieldLinkSelector)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSettingUpsert) SetCreatedAt(v time.Time) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateCreatedAt() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSettingUpsert) SetUpdatedAt(v time.Time) *ScrapingSettingUpsert {
	u.Set(scrapingsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsert) UpdateUpdatedAt() *ScrapingSettingUpsert {
	u.SetExcluded(scrapingsetting.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scrapingsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScrapingSettingUpsertOne) UpdateNewValues() *ScrapingSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scrapingsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScrapingSettingUpsertOne) Ignore() *ScrapingSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScrapingSettingUpsertOne) DoNothing() *ScrapingSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScrapingSettingCreate.OnConflict
// documentation for more info.
func (u *ScrapingSettingUpsertOne) Update(set func(*ScrapingSettingUpsert)) *ScrapingSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScrapingSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetSelector sets the "selector" field.
func (u *ScrapingSettingUpsertOne) SetSelector(v string) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateSelector()
	})
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSettingUpsertOne) SetInnerSelector(v string) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetInnerSelector(v)
	})
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateInnerSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateInnerSelector()
	})
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSettingUpsertOne) SetTitleSelector(v string) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetTitleSelector(v)
	})
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateTitleSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateTitleSelector()
	})
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSettingUpsertOne) SetDescriptionSelector(v string) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetDescriptionSelector(v)
	})
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateDescriptionSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateDescriptionSelector()
	})
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSettingUpsertOne) ClearDescriptionSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.ClearDescriptionSelector()
	})
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSettingUpsertOne) SetLinkSelector(v string) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetLinkSelector(v)
	})
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateLinkSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateLinkSelector()
	})
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSettingUpsertOne) ClearLinkSelector() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.ClearLinkSelector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSettingUpsertOne) SetCreatedAt(v time.Time) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateCreatedAt() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSettingUpsertOne) SetUpdatedAt(v time.Time) *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsertOne) UpdateUpdatedAt() *ScrapingSettingUpsertOne {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScrapingSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScrapingSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScrapingSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScrapingSettingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScrapingSettingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScrapingSettingCreateBulk is the builder for creating many ScrapingSetting entities in bulk.
type ScrapingSettingCreateBulk struct {
	config
	err      error
	builders []*ScrapingSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the ScrapingSetting entities in the database.
func (sscb *ScrapingSettingCreateBulk) Save(ctx context.Context) ([]*ScrapingSetting, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ScrapingSetting, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScrapingSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ScrapingSettingCreateBulk) SaveX(ctx context.Context) []*ScrapingSetting {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ScrapingSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ScrapingSettingCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScrapingSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScrapingSettingUpsert) {
//			SetSelector(v+v).
//		}).
//		Exec(ctx)
func (sscb *ScrapingSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScrapingSettingUpsertBulk {
	sscb.conflict = opts
	return &ScrapingSettingUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *ScrapingSettingCreateBulk) OnConflictColumns(columns ...string) *ScrapingSettingUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &ScrapingSettingUpsertBulk{
		create: sscb,
	}
}

// ScrapingSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of ScrapingSetting nodes.
type ScrapingSettingUpsertBulk struct {
	create *ScrapingSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scrapingsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScrapingSettingUpsertBulk) UpdateNewValues() *ScrapingSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scrapingsetting.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScrapingSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScrapingSettingUpsertBulk) Ignore() *ScrapingSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScrapingSettingUpsertBulk) DoNothing() *ScrapingSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScrapingSettingCreateBulk.OnConflict
// documentation for more info.
func (u *ScrapingSettingUpsertBulk) Update(set func(*ScrapingSettingUpsert)) *ScrapingSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScrapingSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetSelector sets the "selector" field.
func (u *ScrapingSettingUpsertBulk) SetSelector(v string) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateSelector()
	})
}

// SetInnerSelector sets the "inner_selector" field.
func (u *ScrapingSettingUpsertBulk) SetInnerSelector(v string) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetInnerSelector(v)
	})
}

// UpdateInnerSelector sets the "inner_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateInnerSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateInnerSelector()
	})
}

// SetTitleSelector sets the "title_selector" field.
func (u *ScrapingSettingUpsertBulk) SetTitleSelector(v string) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetTitleSelector(v)
	})
}

// UpdateTitleSelector sets the "title_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateTitleSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateTitleSelector()
	})
}

// SetDescriptionSelector sets the "description_selector" field.
func (u *ScrapingSettingUpsertBulk) SetDescriptionSelector(v string) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetDescriptionSelector(v)
	})
}

// UpdateDescriptionSelector sets the "description_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateDescriptionSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateDescriptionSelector()
	})
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (u *ScrapingSettingUpsertBulk) ClearDescriptionSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.ClearDescriptionSelector()
	})
}

// SetLinkSelector sets the "link_selector" field.
func (u *ScrapingSettingUpsertBulk) SetLinkSelector(v string) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetLinkSelector(v)
	})
}

// UpdateLinkSelector sets the "link_selector" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateLinkSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateLinkSelector()
	})
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (u *ScrapingSettingUpsertBulk) ClearLinkSelector() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.ClearLinkSelector()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScrapingSettingUpsertBulk) SetCreatedAt(v time.Time) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateCreatedAt() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScrapingSettingUpsertBulk) SetUpdatedAt(v time.Time) *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScrapingSettingUpsertBulk) UpdateUpdatedAt() *ScrapingSettingUpsertBulk {
	return u.Update(func(s *ScrapingSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScrapingSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScrapingSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScrapingSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScrapingSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
