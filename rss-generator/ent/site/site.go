// Code generated by ent, DO NOT EDIT.

package site

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the site type in the database.
	Label = "site"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldEnableJsRendering holds the string denoting the enable_js_rendering field in the database.
	FieldEnableJsRendering = "enable_js_rendering"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldScrapingSelectorID holds the string denoting the scraping_selector_id field in the database.
	FieldScrapingSelectorID = "scraping_selector_id"
	// EdgeScrapingSelector holds the string denoting the scraping_selector edge name in mutations.
	EdgeScrapingSelector = "scraping_selector"
	// Table holds the table name of the site in the database.
	Table = "sites"
	// ScrapingSelectorTable is the table that holds the scraping_selector relation/edge.
	ScrapingSelectorTable = "sites"
	// ScrapingSelectorInverseTable is the table name for the ScrapingSelector entity.
	// It exists in this package in order to avoid circular dependency with the "scrapingselector" package.
	ScrapingSelectorInverseTable = "scraping_selectors"
	// ScrapingSelectorColumn is the table column denoting the scraping_selector relation/edge.
	ScrapingSelectorColumn = "scraping_selector_id"
)

// Columns holds all SQL columns for site fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldTitle,
	FieldDescription,
	FieldURL,
	FieldEnableJsRendering,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldScrapingSelectorID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultEnableJsRendering holds the default value on creation for the "enable_js_rendering" field.
	DefaultEnableJsRendering bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Site queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByEnableJsRendering orders the results by the enable_js_rendering field.
func ByEnableJsRendering(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableJsRendering, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByScrapingSelectorID orders the results by the scraping_selector_id field.
func ByScrapingSelectorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScrapingSelectorID, opts...).ToFunc()
}

// ByScrapingSelectorField orders the results by scraping_selector field.
func ByScrapingSelectorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScrapingSelectorStep(), sql.OrderByField(field, opts...))
	}
}
func newScrapingSelectorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScrapingSelectorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ScrapingSelectorTable, ScrapingSelectorColumn),
	)
}
