// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/feed"
	"github.com/ITK13201/rss-generator/ent/scrapingsetting"
	"github.com/ITK13201/rss-generator/ent/site"
	"github.com/google/uuid"
)

// SiteCreate is the builder for creating a Site entity.
type SiteCreate struct {
	config
	mutation *SiteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (sc *SiteCreate) SetSlug(s string) *SiteCreate {
	sc.mutation.SetSlug(s)
	return sc
}

// SetTitle sets the "title" field.
func (sc *SiteCreate) SetTitle(s string) *SiteCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SiteCreate) SetDescription(s string) *SiteCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SiteCreate) SetNillableDescription(s *string) *SiteCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetURL sets the "url" field.
func (sc *SiteCreate) SetURL(s string) *SiteCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (sc *SiteCreate) SetEnableJsRendering(b bool) *SiteCreate {
	sc.mutation.SetEnableJsRendering(b)
	return sc
}

// SetNillableEnableJsRendering sets the "enable_js_rendering" field if the given value is not nil.
func (sc *SiteCreate) SetNillableEnableJsRendering(b *bool) *SiteCreate {
	if b != nil {
		sc.SetEnableJsRendering(*b)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SiteCreate) SetCreatedAt(t time.Time) *SiteCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SiteCreate) SetNillableCreatedAt(t *time.Time) *SiteCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SiteCreate) SetUpdatedAt(t time.Time) *SiteCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SiteCreate) SetNillableUpdatedAt(t *time.Time) *SiteCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SiteCreate) SetID(i int) *SiteCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddScrapingSettingIDs adds the "scraping_settings" edge to the ScrapingSetting entity by IDs.
func (sc *SiteCreate) AddScrapingSettingIDs(ids ...int) *SiteCreate {
	sc.mutation.AddScrapingSettingIDs(ids...)
	return sc
}

// AddScrapingSettings adds the "scraping_settings" edges to the ScrapingSetting entity.
func (sc *SiteCreate) AddScrapingSettings(s ...*ScrapingSetting) *SiteCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddScrapingSettingIDs(ids...)
}

// AddFeedIDs adds the "feeds" edge to the Feed entity by IDs.
func (sc *SiteCreate) AddFeedIDs(ids ...uuid.UUID) *SiteCreate {
	sc.mutation.AddFeedIDs(ids...)
	return sc
}

// AddFeeds adds the "feeds" edges to the Feed entity.
func (sc *SiteCreate) AddFeeds(f ...*Feed) *SiteCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFeedIDs(ids...)
}

// Mutation returns the SiteMutation object of the builder.
func (sc *SiteCreate) Mutation() *SiteMutation {
	return sc.mutation
}

// Save creates the Site in the database.
func (sc *SiteCreate) Save(ctx context.Context) (*Site, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SiteCreate) SaveX(ctx context.Context) *Site {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SiteCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SiteCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SiteCreate) defaults() {
	if _, ok := sc.mutation.EnableJsRendering(); !ok {
		v := site.DefaultEnableJsRendering
		sc.mutation.SetEnableJsRendering(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := site.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := site.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SiteCreate) check() error {
	if _, ok := sc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Site.slug"`)}
	}
	if v, ok := sc.mutation.Slug(); ok {
		if err := site.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Site.slug": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Site.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := site.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Site.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Site.url"`)}
	}
	if v, ok := sc.mutation.URL(); ok {
		if err := site.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Site.url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.EnableJsRendering(); !ok {
		return &ValidationError{Name: "enable_js_rendering", err: errors.New(`ent: missing required field "Site.enable_js_rendering"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Site.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Site.updated_at"`)}
	}
	return nil
}

func (sc *SiteCreate) sqlSave(ctx context.Context) (*Site, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SiteCreate) createSpec() (*Site, *sqlgraph.CreateSpec) {
	var (
		_node = &Site{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(site.Table, sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Slug(); ok {
		_spec.SetField(site.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(site.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(site.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.EnableJsRendering(); ok {
		_spec.SetField(site.FieldEnableJsRendering, field.TypeBool, value)
		_node.EnableJsRendering = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.ScrapingSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   site.ScrapingSettingsTable,
			Columns: []string{site.ScrapingSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scrapingsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   site.FeedsTable,
			Columns: []string{site.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Site.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (sc *SiteCreate) OnConflict(opts ...sql.ConflictOption) *SiteUpsertOne {
	sc.conflict = opts
	return &SiteUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Site.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SiteCreate) OnConflictColumns(columns ...string) *SiteUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SiteUpsertOne{
		create: sc,
	}
}

type (
	// SiteUpsertOne is the builder for "upsert"-ing
	//  one Site node.
	SiteUpsertOne struct {
		create *SiteCreate
	}

	// SiteUpsert is the "OnConflict" setter.
	SiteUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *SiteUpsert) SetSlug(v string) *SiteUpsert {
	u.Set(site.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SiteUpsert) UpdateSlug() *SiteUpsert {
	u.SetExcluded(site.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *SiteUpsert) SetTitle(v string) *SiteUpsert {
	u.Set(site.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SiteUpsert) UpdateTitle() *SiteUpsert {
	u.SetExcluded(site.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *SiteUpsert) SetDescription(v string) *SiteUpsert {
	u.Set(site.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SiteUpsert) UpdateDescription() *SiteUpsert {
	u.SetExcluded(site.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SiteUpsert) ClearDescription() *SiteUpsert {
	u.SetNull(site.FieldDescription)
	return u
}

// SetURL sets the "url" field.
func (u *SiteUpsert) SetURL(v string) *SiteUpsert {
	u.Set(site.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SiteUpsert) UpdateURL() *SiteUpsert {
	u.SetExcluded(site.FieldURL)
	return u
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (u *SiteUpsert) SetEnableJsRendering(v bool) *SiteUpsert {
	u.Set(site.FieldEnableJsRendering, v)
	return u
}

// UpdateEnableJsRendering sets the "enable_js_rendering" field to the value that was provided on create.
func (u *SiteUpsert) UpdateEnableJsRendering() *SiteUpsert {
	u.SetExcluded(site.FieldEnableJsRendering)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SiteUpsert) SetCreatedAt(v time.Time) *SiteUpsert {
	u.Set(site.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SiteUpsert) UpdateCreatedAt() *SiteUpsert {
	u.SetExcluded(site.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteUpsert) SetUpdatedAt(v time.Time) *SiteUpsert {
	u.Set(site.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteUpsert) UpdateUpdatedAt() *SiteUpsert {
	u.SetExcluded(site.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Site.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(site.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SiteUpsertOne) UpdateNewValues() *SiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(site.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Site.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SiteUpsertOne) Ignore() *SiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteUpsertOne) DoNothing() *SiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteCreate.OnConflict
// documentation for more info.
func (u *SiteUpsertOne) Update(set func(*SiteUpsert)) *SiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *SiteUpsertOne) SetSlug(v string) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateSlug() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *SiteUpsertOne) SetTitle(v string) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateTitle() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *SiteUpsertOne) SetDescription(v string) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateDescription() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SiteUpsertOne) ClearDescription() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.ClearDescription()
	})
}

// SetURL sets the "url" field.
func (u *SiteUpsertOne) SetURL(v string) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateURL() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateURL()
	})
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (u *SiteUpsertOne) SetEnableJsRendering(v bool) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetEnableJsRendering(v)
	})
}

// UpdateEnableJsRendering sets the "enable_js_rendering" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateEnableJsRendering() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateEnableJsRendering()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SiteUpsertOne) SetCreatedAt(v time.Time) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateCreatedAt() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteUpsertOne) SetUpdatedAt(v time.Time) *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteUpsertOne) UpdateUpdatedAt() *SiteUpsertOne {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SiteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SiteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SiteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SiteCreateBulk is the builder for creating many Site entities in bulk.
type SiteCreateBulk struct {
	config
	err      error
	builders []*SiteCreate
	conflict []sql.ConflictOption
}

// Save creates the Site entities in the database.
func (scb *SiteCreateBulk) Save(ctx context.Context) ([]*Site, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Site, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SiteCreateBulk) SaveX(ctx context.Context) []*Site {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SiteCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SiteCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Site.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (scb *SiteCreateBulk) OnConflict(opts ...sql.ConflictOption) *SiteUpsertBulk {
	scb.conflict = opts
	return &SiteUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Site.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SiteCreateBulk) OnConflictColumns(columns ...string) *SiteUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SiteUpsertBulk{
		create: scb,
	}
}

// SiteUpsertBulk is the builder for "upsert"-ing
// a bulk of Site nodes.
type SiteUpsertBulk struct {
	create *SiteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Site.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(site.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SiteUpsertBulk) UpdateNewValues() *SiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(site.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Site.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SiteUpsertBulk) Ignore() *SiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteUpsertBulk) DoNothing() *SiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteCreateBulk.OnConflict
// documentation for more info.
func (u *SiteUpsertBulk) Update(set func(*SiteUpsert)) *SiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *SiteUpsertBulk) SetSlug(v string) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateSlug() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *SiteUpsertBulk) SetTitle(v string) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateTitle() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *SiteUpsertBulk) SetDescription(v string) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateDescription() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SiteUpsertBulk) ClearDescription() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.ClearDescription()
	})
}

// SetURL sets the "url" field.
func (u *SiteUpsertBulk) SetURL(v string) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateURL() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateURL()
	})
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (u *SiteUpsertBulk) SetEnableJsRendering(v bool) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetEnableJsRendering(v)
	})
}

// UpdateEnableJsRendering sets the "enable_js_rendering" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateEnableJsRendering() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateEnableJsRendering()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SiteUpsertBulk) SetCreatedAt(v time.Time) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateCreatedAt() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteUpsertBulk) SetUpdatedAt(v time.Time) *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteUpsertBulk) UpdateUpdatedAt() *SiteUpsertBulk {
	return u.Update(func(s *SiteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SiteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SiteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
