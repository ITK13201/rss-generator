// Code generated by ent, DO NOT EDIT.

package scrapingsetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scrapingsetting type in the database.
	Label = "scraping_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSelector holds the string denoting the selector field in the database.
	FieldSelector = "selector"
	// FieldInnerSelector holds the string denoting the inner_selector field in the database.
	FieldInnerSelector = "inner_selector"
	// FieldTitleSelector holds the string denoting the title_selector field in the database.
	FieldTitleSelector = "title_selector"
	// FieldDescriptionSelector holds the string denoting the description_selector field in the database.
	FieldDescriptionSelector = "description_selector"
	// FieldLinkSelector holds the string denoting the link_selector field in the database.
	FieldLinkSelector = "link_selector"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// Table holds the table name of the scrapingsetting in the database.
	Table = "scraping_settings"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "scraping_settings"
	// SiteInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SiteInverseTable = "sites"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "site_id"
)

// Columns holds all SQL columns for scrapingsetting fields.
var Columns = []string{
	FieldID,
	FieldSelector,
	FieldInnerSelector,
	FieldTitleSelector,
	FieldDescriptionSelector,
	FieldLinkSelector,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scraping_settings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"site_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SelectorValidator is a validator for the "selector" field. It is called by the builders before save.
	SelectorValidator func(string) error
	// InnerSelectorValidator is a validator for the "inner_selector" field. It is called by the builders before save.
	InnerSelectorValidator func(string) error
	// TitleSelectorValidator is a validator for the "title_selector" field. It is called by the builders before save.
	TitleSelectorValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ScrapingSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySelector orders the results by the selector field.
func BySelector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelector, opts...).ToFunc()
}

// ByInnerSelector orders the results by the inner_selector field.
func ByInnerSelector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInnerSelector, opts...).ToFunc()
}

// ByTitleSelector orders the results by the title_selector field.
func ByTitleSelector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleSelector, opts...).ToFunc()
}

// ByDescriptionSelector orders the results by the description_selector field.
func ByDescriptionSelector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescriptionSelector, opts...).ToFunc()
}

// ByLinkSelector orders the results by the link_selector field.
func ByLinkSelector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkSelector, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
