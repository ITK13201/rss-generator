// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
	"github.com/google/uuid"
)

// TestFeedItemUpdate is the builder for updating TestFeedItem entities.
type TestFeedItemUpdate struct {
	config
	hooks    []Hook
	mutation *TestFeedItemMutation
}

// Where appends a list predicates to the TestFeedItemUpdate builder.
func (tfiu *TestFeedItemUpdate) Where(ps ...predicate.TestFeedItem) *TestFeedItemUpdate {
	tfiu.mutation.Where(ps...)
	return tfiu
}

// SetTitle sets the "title" field.
func (tfiu *TestFeedItemUpdate) SetTitle(s string) *TestFeedItemUpdate {
	tfiu.mutation.SetTitle(s)
	return tfiu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tfiu *TestFeedItemUpdate) SetNillableTitle(s *string) *TestFeedItemUpdate {
	if s != nil {
		tfiu.SetTitle(*s)
	}
	return tfiu
}

// SetDescription sets the "description" field.
func (tfiu *TestFeedItemUpdate) SetDescription(s string) *TestFeedItemUpdate {
	tfiu.mutation.SetDescription(s)
	return tfiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfiu *TestFeedItemUpdate) SetNillableDescription(s *string) *TestFeedItemUpdate {
	if s != nil {
		tfiu.SetDescription(*s)
	}
	return tfiu
}

// SetLink sets the "link" field.
func (tfiu *TestFeedItemUpdate) SetLink(s string) *TestFeedItemUpdate {
	tfiu.mutation.SetLink(s)
	return tfiu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (tfiu *TestFeedItemUpdate) SetNillableLink(s *string) *TestFeedItemUpdate {
	if s != nil {
		tfiu.SetLink(*s)
	}
	return tfiu
}

// ClearLink clears the value of the "link" field.
func (tfiu *TestFeedItemUpdate) ClearLink() *TestFeedItemUpdate {
	tfiu.mutation.ClearLink()
	return tfiu
}

// SetPublishedAt sets the "published_at" field.
func (tfiu *TestFeedItemUpdate) SetPublishedAt(t time.Time) *TestFeedItemUpdate {
	tfiu.mutation.SetPublishedAt(t)
	return tfiu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tfiu *TestFeedItemUpdate) SetNillablePublishedAt(t *time.Time) *TestFeedItemUpdate {
	if t != nil {
		tfiu.SetPublishedAt(*t)
	}
	return tfiu
}

// SetCreatedAt sets the "created_at" field.
func (tfiu *TestFeedItemUpdate) SetCreatedAt(t time.Time) *TestFeedItemUpdate {
	tfiu.mutation.SetCreatedAt(t)
	return tfiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfiu *TestFeedItemUpdate) SetNillableCreatedAt(t *time.Time) *TestFeedItemUpdate {
	if t != nil {
		tfiu.SetCreatedAt(*t)
	}
	return tfiu
}

// SetUpdatedAt sets the "updated_at" field.
func (tfiu *TestFeedItemUpdate) SetUpdatedAt(t time.Time) *TestFeedItemUpdate {
	tfiu.mutation.SetUpdatedAt(t)
	return tfiu
}

// SetTestFeedID sets the "test_feed" edge to the TestFeed entity by ID.
func (tfiu *TestFeedItemUpdate) SetTestFeedID(id uuid.UUID) *TestFeedItemUpdate {
	tfiu.mutation.SetTestFeedID(id)
	return tfiu
}

// SetTestFeed sets the "test_feed" edge to the TestFeed entity.
func (tfiu *TestFeedItemUpdate) SetTestFeed(t *TestFeed) *TestFeedItemUpdate {
	return tfiu.SetTestFeedID(t.ID)
}

// Mutation returns the TestFeedItemMutation object of the builder.
func (tfiu *TestFeedItemUpdate) Mutation() *TestFeedItemMutation {
	return tfiu.mutation
}

// ClearTestFeed clears the "test_feed" edge to the TestFeed entity.
func (tfiu *TestFeedItemUpdate) ClearTestFeed() *TestFeedItemUpdate {
	tfiu.mutation.ClearTestFeed()
	return tfiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfiu *TestFeedItemUpdate) Save(ctx context.Context) (int, error) {
	tfiu.defaults()
	return withHooks(ctx, tfiu.sqlSave, tfiu.mutation, tfiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfiu *TestFeedItemUpdate) SaveX(ctx context.Context) int {
	affected, err := tfiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfiu *TestFeedItemUpdate) Exec(ctx context.Context) error {
	_, err := tfiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfiu *TestFeedItemUpdate) ExecX(ctx context.Context) {
	if err := tfiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfiu *TestFeedItemUpdate) defaults() {
	if _, ok := tfiu.mutation.UpdatedAt(); !ok {
		v := testfeeditem.UpdateDefaultUpdatedAt()
		tfiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfiu *TestFeedItemUpdate) check() error {
	if v, ok := tfiu.mutation.Title(); ok {
		if err := testfeeditem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.title": %w`, err)}
		}
	}
	if v, ok := tfiu.mutation.Description(); ok {
		if err := testfeeditem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.description": %w`, err)}
		}
	}
	if v, ok := tfiu.mutation.Link(); ok {
		if err := testfeeditem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.link": %w`, err)}
		}
	}
	if _, ok := tfiu.mutation.TestFeedID(); tfiu.mutation.TestFeedCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestFeedItem.test_feed"`)
	}
	return nil
}

func (tfiu *TestFeedItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testfeeditem.Table, testfeeditem.Columns, sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt))
	if ps := tfiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfiu.mutation.Title(); ok {
		_spec.SetField(testfeeditem.FieldTitle, field.TypeString, value)
	}
	if value, ok := tfiu.mutation.Description(); ok {
		_spec.SetField(testfeeditem.FieldDescription, field.TypeString, value)
	}
	if value, ok := tfiu.mutation.Link(); ok {
		_spec.SetField(testfeeditem.FieldLink, field.TypeString, value)
	}
	if tfiu.mutation.LinkCleared() {
		_spec.ClearField(testfeeditem.FieldLink, field.TypeString)
	}
	if value, ok := tfiu.mutation.PublishedAt(); ok {
		_spec.SetField(testfeeditem.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := tfiu.mutation.CreatedAt(); ok {
		_spec.SetField(testfeeditem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tfiu.mutation.UpdatedAt(); ok {
		_spec.SetField(testfeeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfiu.mutation.TestFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeeditem.TestFeedTable,
			Columns: []string{testfeeditem.TestFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfiu.mutation.TestFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeeditem.TestFeedTable,
			Columns: []string{testfeeditem.TestFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testfeeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfiu.mutation.done = true
	return n, nil
}

// TestFeedItemUpdateOne is the builder for updating a single TestFeedItem entity.
type TestFeedItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestFeedItemMutation
}

// SetTitle sets the "title" field.
func (tfiuo *TestFeedItemUpdateOne) SetTitle(s string) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetTitle(s)
	return tfiuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tfiuo *TestFeedItemUpdateOne) SetNillableTitle(s *string) *TestFeedItemUpdateOne {
	if s != nil {
		tfiuo.SetTitle(*s)
	}
	return tfiuo
}

// SetDescription sets the "description" field.
func (tfiuo *TestFeedItemUpdateOne) SetDescription(s string) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetDescription(s)
	return tfiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfiuo *TestFeedItemUpdateOne) SetNillableDescription(s *string) *TestFeedItemUpdateOne {
	if s != nil {
		tfiuo.SetDescription(*s)
	}
	return tfiuo
}

// SetLink sets the "link" field.
func (tfiuo *TestFeedItemUpdateOne) SetLink(s string) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetLink(s)
	return tfiuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (tfiuo *TestFeedItemUpdateOne) SetNillableLink(s *string) *TestFeedItemUpdateOne {
	if s != nil {
		tfiuo.SetLink(*s)
	}
	return tfiuo
}

// ClearLink clears the value of the "link" field.
func (tfiuo *TestFeedItemUpdateOne) ClearLink() *TestFeedItemUpdateOne {
	tfiuo.mutation.ClearLink()
	return tfiuo
}

// SetPublishedAt sets the "published_at" field.
func (tfiuo *TestFeedItemUpdateOne) SetPublishedAt(t time.Time) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetPublishedAt(t)
	return tfiuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tfiuo *TestFeedItemUpdateOne) SetNillablePublishedAt(t *time.Time) *TestFeedItemUpdateOne {
	if t != nil {
		tfiuo.SetPublishedAt(*t)
	}
	return tfiuo
}

// SetCreatedAt sets the "created_at" field.
func (tfiuo *TestFeedItemUpdateOne) SetCreatedAt(t time.Time) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetCreatedAt(t)
	return tfiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfiuo *TestFeedItemUpdateOne) SetNillableCreatedAt(t *time.Time) *TestFeedItemUpdateOne {
	if t != nil {
		tfiuo.SetCreatedAt(*t)
	}
	return tfiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tfiuo *TestFeedItemUpdateOne) SetUpdatedAt(t time.Time) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetUpdatedAt(t)
	return tfiuo
}

// SetTestFeedID sets the "test_feed" edge to the TestFeed entity by ID.
func (tfiuo *TestFeedItemUpdateOne) SetTestFeedID(id uuid.UUID) *TestFeedItemUpdateOne {
	tfiuo.mutation.SetTestFeedID(id)
	return tfiuo
}

// SetTestFeed sets the "test_feed" edge to the TestFeed entity.
func (tfiuo *TestFeedItemUpdateOne) SetTestFeed(t *TestFeed) *TestFeedItemUpdateOne {
	return tfiuo.SetTestFeedID(t.ID)
}

// Mutation returns the TestFeedItemMutation object of the builder.
func (tfiuo *TestFeedItemUpdateOne) Mutation() *TestFeedItemMutation {
	return tfiuo.mutation
}

// ClearTestFeed clears the "test_feed" edge to the TestFeed entity.
func (tfiuo *TestFeedItemUpdateOne) ClearTestFeed() *TestFeedItemUpdateOne {
	tfiuo.mutation.ClearTestFeed()
	return tfiuo
}

// Where appends a list predicates to the TestFeedItemUpdate builder.
func (tfiuo *TestFeedItemUpdateOne) Where(ps ...predicate.TestFeedItem) *TestFeedItemUpdateOne {
	tfiuo.mutation.Where(ps...)
	return tfiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfiuo *TestFeedItemUpdateOne) Select(field string, fields ...string) *TestFeedItemUpdateOne {
	tfiuo.fields = append([]string{field}, fields...)
	return tfiuo
}

// Save executes the query and returns the updated TestFeedItem entity.
func (tfiuo *TestFeedItemUpdateOne) Save(ctx context.Context) (*TestFeedItem, error) {
	tfiuo.defaults()
	return withHooks(ctx, tfiuo.sqlSave, tfiuo.mutation, tfiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfiuo *TestFeedItemUpdateOne) SaveX(ctx context.Context) *TestFeedItem {
	node, err := tfiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfiuo *TestFeedItemUpdateOne) Exec(ctx context.Context) error {
	_, err := tfiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfiuo *TestFeedItemUpdateOne) ExecX(ctx context.Context) {
	if err := tfiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfiuo *TestFeedItemUpdateOne) defaults() {
	if _, ok := tfiuo.mutation.UpdatedAt(); !ok {
		v := testfeeditem.UpdateDefaultUpdatedAt()
		tfiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfiuo *TestFeedItemUpdateOne) check() error {
	if v, ok := tfiuo.mutation.Title(); ok {
		if err := testfeeditem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.title": %w`, err)}
		}
	}
	if v, ok := tfiuo.mutation.Description(); ok {
		if err := testfeeditem.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.description": %w`, err)}
		}
	}
	if v, ok := tfiuo.mutation.Link(); ok {
		if err := testfeeditem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "TestFeedItem.link": %w`, err)}
		}
	}
	if _, ok := tfiuo.mutation.TestFeedID(); tfiuo.mutation.TestFeedCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestFeedItem.test_feed"`)
	}
	return nil
}

func (tfiuo *TestFeedItemUpdateOne) sqlSave(ctx context.Context) (_node *TestFeedItem, err error) {
	if err := tfiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testfeeditem.Table, testfeeditem.Columns, sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt))
	id, ok := tfiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestFeedItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testfeeditem.FieldID)
		for _, f := range fields {
			if !testfeeditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testfeeditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfiuo.mutation.Title(); ok {
		_spec.SetField(testfeeditem.FieldTitle, field.TypeString, value)
	}
	if value, ok := tfiuo.mutation.Description(); ok {
		_spec.SetField(testfeeditem.FieldDescription, field.TypeString, value)
	}
	if value, ok := tfiuo.mutation.Link(); ok {
		_spec.SetField(testfeeditem.FieldLink, field.TypeString, value)
	}
	if tfiuo.mutation.LinkCleared() {
		_spec.ClearField(testfeeditem.FieldLink, field.TypeString)
	}
	if value, ok := tfiuo.mutation.PublishedAt(); ok {
		_spec.SetField(testfeeditem.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := tfiuo.mutation.CreatedAt(); ok {
		_spec.SetField(testfeeditem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tfiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testfeeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfiuo.mutation.TestFeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeeditem.TestFeedTable,
			Columns: []string{testfeeditem.TestFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfiuo.mutation.TestFeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testfeeditem.TestFeedTable,
			Columns: []string{testfeeditem.TestFeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestFeedItem{config: tfiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testfeeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfiuo.mutation.done = true
	return _node, nil
}
