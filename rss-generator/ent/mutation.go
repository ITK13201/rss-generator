// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/scrapingselector"
	"github.com/ITK13201/rss-generator/ent/site"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeScrapingSelector = "ScrapingSelector"
	TypeSite             = "Site"
)

// ScrapingSelectorMutation represents an operation that mutates the ScrapingSelector nodes in the graph.
type ScrapingSelectorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	selector             *string
	inner_selector       *string
	title_selector       *string
	description_selector *string
	link_selector        *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	site                 *int
	clearedsite          bool
	done                 bool
	oldValue             func(context.Context) (*ScrapingSelector, error)
	predicates           []predicate.ScrapingSelector
}

var _ ent.Mutation = (*ScrapingSelectorMutation)(nil)

// scrapingselectorOption allows management of the mutation configuration using functional options.
type scrapingselectorOption func(*ScrapingSelectorMutation)

// newScrapingSelectorMutation creates new mutation for the ScrapingSelector entity.
func newScrapingSelectorMutation(c config, op Op, opts ...scrapingselectorOption) *ScrapingSelectorMutation {
	m := &ScrapingSelectorMutation{
		config:        c,
		op:            op,
		typ:           TypeScrapingSelector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScrapingSelectorID sets the ID field of the mutation.
func withScrapingSelectorID(id int) scrapingselectorOption {
	return func(m *ScrapingSelectorMutation) {
		var (
			err   error
			once  sync.Once
			value *ScrapingSelector
		)
		m.oldValue = func(ctx context.Context) (*ScrapingSelector, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ScrapingSelector.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScrapingSelector sets the old ScrapingSelector of the mutation.
func withScrapingSelector(node *ScrapingSelector) scrapingselectorOption {
	return func(m *ScrapingSelectorMutation) {
		m.oldValue = func(context.Context) (*ScrapingSelector, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScrapingSelectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScrapingSelectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ScrapingSelector entities.
func (m *ScrapingSelectorMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScrapingSelectorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScrapingSelectorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ScrapingSelector.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSelector sets the "selector" field.
func (m *ScrapingSelectorMutation) SetSelector(s string) {
	m.selector = &s
}

// Selector returns the value of the "selector" field in the mutation.
func (m *ScrapingSelectorMutation) Selector() (r string, exists bool) {
	v := m.selector
	if v == nil {
		return
	}
	return *v, true
}

// OldSelector returns the old "selector" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelector: %w", err)
	}
	return oldValue.Selector, nil
}

// ResetSelector resets all changes to the "selector" field.
func (m *ScrapingSelectorMutation) ResetSelector() {
	m.selector = nil
}

// SetInnerSelector sets the "inner_selector" field.
func (m *ScrapingSelectorMutation) SetInnerSelector(s string) {
	m.inner_selector = &s
}

// InnerSelector returns the value of the "inner_selector" field in the mutation.
func (m *ScrapingSelectorMutation) InnerSelector() (r string, exists bool) {
	v := m.inner_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldInnerSelector returns the old "inner_selector" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldInnerSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInnerSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInnerSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInnerSelector: %w", err)
	}
	return oldValue.InnerSelector, nil
}

// ResetInnerSelector resets all changes to the "inner_selector" field.
func (m *ScrapingSelectorMutation) ResetInnerSelector() {
	m.inner_selector = nil
}

// SetTitleSelector sets the "title_selector" field.
func (m *ScrapingSelectorMutation) SetTitleSelector(s string) {
	m.title_selector = &s
}

// TitleSelector returns the value of the "title_selector" field in the mutation.
func (m *ScrapingSelectorMutation) TitleSelector() (r string, exists bool) {
	v := m.title_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleSelector returns the old "title_selector" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldTitleSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleSelector: %w", err)
	}
	return oldValue.TitleSelector, nil
}

// ResetTitleSelector resets all changes to the "title_selector" field.
func (m *ScrapingSelectorMutation) ResetTitleSelector() {
	m.title_selector = nil
}

// SetDescriptionSelector sets the "description_selector" field.
func (m *ScrapingSelectorMutation) SetDescriptionSelector(s string) {
	m.description_selector = &s
}

// DescriptionSelector returns the value of the "description_selector" field in the mutation.
func (m *ScrapingSelectorMutation) DescriptionSelector() (r string, exists bool) {
	v := m.description_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionSelector returns the old "description_selector" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldDescriptionSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionSelector: %w", err)
	}
	return oldValue.DescriptionSelector, nil
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (m *ScrapingSelectorMutation) ClearDescriptionSelector() {
	m.description_selector = nil
	m.clearedFields[scrapingselector.FieldDescriptionSelector] = struct{}{}
}

// DescriptionSelectorCleared returns if the "description_selector" field was cleared in this mutation.
func (m *ScrapingSelectorMutation) DescriptionSelectorCleared() bool {
	_, ok := m.clearedFields[scrapingselector.FieldDescriptionSelector]
	return ok
}

// ResetDescriptionSelector resets all changes to the "description_selector" field.
func (m *ScrapingSelectorMutation) ResetDescriptionSelector() {
	m.description_selector = nil
	delete(m.clearedFields, scrapingselector.FieldDescriptionSelector)
}

// SetLinkSelector sets the "link_selector" field.
func (m *ScrapingSelectorMutation) SetLinkSelector(s string) {
	m.link_selector = &s
}

// LinkSelector returns the value of the "link_selector" field in the mutation.
func (m *ScrapingSelectorMutation) LinkSelector() (r string, exists bool) {
	v := m.link_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkSelector returns the old "link_selector" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldLinkSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkSelector: %w", err)
	}
	return oldValue.LinkSelector, nil
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (m *ScrapingSelectorMutation) ClearLinkSelector() {
	m.link_selector = nil
	m.clearedFields[scrapingselector.FieldLinkSelector] = struct{}{}
}

// LinkSelectorCleared returns if the "link_selector" field was cleared in this mutation.
func (m *ScrapingSelectorMutation) LinkSelectorCleared() bool {
	_, ok := m.clearedFields[scrapingselector.FieldLinkSelector]
	return ok
}

// ResetLinkSelector resets all changes to the "link_selector" field.
func (m *ScrapingSelectorMutation) ResetLinkSelector() {
	m.link_selector = nil
	delete(m.clearedFields, scrapingselector.FieldLinkSelector)
}

// SetCreatedAt sets the "created_at" field.
func (m *ScrapingSelectorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ScrapingSelectorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ScrapingSelectorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ScrapingSelectorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ScrapingSelectorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ScrapingSelector entity.
// If the ScrapingSelector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSelectorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ScrapingSelectorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSiteID sets the "site" edge to the Site entity by id.
func (m *ScrapingSelectorMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the Site entity.
func (m *ScrapingSelectorMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the Site entity was cleared.
func (m *ScrapingSelectorMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *ScrapingSelectorMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *ScrapingSelectorMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *ScrapingSelectorMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// Where appends a list predicates to the ScrapingSelectorMutation builder.
func (m *ScrapingSelectorMutation) Where(ps ...predicate.ScrapingSelector) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScrapingSelectorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScrapingSelectorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ScrapingSelector, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScrapingSelectorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScrapingSelectorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ScrapingSelector).
func (m *ScrapingSelectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScrapingSelectorMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.selector != nil {
		fields = append(fields, scrapingselector.FieldSelector)
	}
	if m.inner_selector != nil {
		fields = append(fields, scrapingselector.FieldInnerSelector)
	}
	if m.title_selector != nil {
		fields = append(fields, scrapingselector.FieldTitleSelector)
	}
	if m.description_selector != nil {
		fields = append(fields, scrapingselector.FieldDescriptionSelector)
	}
	if m.link_selector != nil {
		fields = append(fields, scrapingselector.FieldLinkSelector)
	}
	if m.created_at != nil {
		fields = append(fields, scrapingselector.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, scrapingselector.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScrapingSelectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scrapingselector.FieldSelector:
		return m.Selector()
	case scrapingselector.FieldInnerSelector:
		return m.InnerSelector()
	case scrapingselector.FieldTitleSelector:
		return m.TitleSelector()
	case scrapingselector.FieldDescriptionSelector:
		return m.DescriptionSelector()
	case scrapingselector.FieldLinkSelector:
		return m.LinkSelector()
	case scrapingselector.FieldCreatedAt:
		return m.CreatedAt()
	case scrapingselector.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScrapingSelectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scrapingselector.FieldSelector:
		return m.OldSelector(ctx)
	case scrapingselector.FieldInnerSelector:
		return m.OldInnerSelector(ctx)
	case scrapingselector.FieldTitleSelector:
		return m.OldTitleSelector(ctx)
	case scrapingselector.FieldDescriptionSelector:
		return m.OldDescriptionSelector(ctx)
	case scrapingselector.FieldLinkSelector:
		return m.OldLinkSelector(ctx)
	case scrapingselector.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case scrapingselector.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ScrapingSelector field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScrapingSelectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scrapingselector.FieldSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelector(v)
		return nil
	case scrapingselector.FieldInnerSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInnerSelector(v)
		return nil
	case scrapingselector.FieldTitleSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleSelector(v)
		return nil
	case scrapingselector.FieldDescriptionSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionSelector(v)
		return nil
	case scrapingselector.FieldLinkSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkSelector(v)
		return nil
	case scrapingselector.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case scrapingselector.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ScrapingSelector field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScrapingSelectorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScrapingSelectorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScrapingSelectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ScrapingSelector numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScrapingSelectorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scrapingselector.FieldDescriptionSelector) {
		fields = append(fields, scrapingselector.FieldDescriptionSelector)
	}
	if m.FieldCleared(scrapingselector.FieldLinkSelector) {
		fields = append(fields, scrapingselector.FieldLinkSelector)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScrapingSelectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScrapingSelectorMutation) ClearField(name string) error {
	switch name {
	case scrapingselector.FieldDescriptionSelector:
		m.ClearDescriptionSelector()
		return nil
	case scrapingselector.FieldLinkSelector:
		m.ClearLinkSelector()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSelector nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScrapingSelectorMutation) ResetField(name string) error {
	switch name {
	case scrapingselector.FieldSelector:
		m.ResetSelector()
		return nil
	case scrapingselector.FieldInnerSelector:
		m.ResetInnerSelector()
		return nil
	case scrapingselector.FieldTitleSelector:
		m.ResetTitleSelector()
		return nil
	case scrapingselector.FieldDescriptionSelector:
		m.ResetDescriptionSelector()
		return nil
	case scrapingselector.FieldLinkSelector:
		m.ResetLinkSelector()
		return nil
	case scrapingselector.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case scrapingselector.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSelector field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScrapingSelectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.site != nil {
		edges = append(edges, scrapingselector.EdgeSite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScrapingSelectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scrapingselector.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScrapingSelectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScrapingSelectorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScrapingSelectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsite {
		edges = append(edges, scrapingselector.EdgeSite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScrapingSelectorMutation) EdgeCleared(name string) bool {
	switch name {
	case scrapingselector.EdgeSite:
		return m.clearedsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScrapingSelectorMutation) ClearEdge(name string) error {
	switch name {
	case scrapingselector.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSelector unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScrapingSelectorMutation) ResetEdge(name string) error {
	switch name {
	case scrapingselector.EdgeSite:
		m.ResetSite()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSelector edge %s", name)
}

// SiteMutation represents an operation that mutates the Site nodes in the graph.
type SiteMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	slug                     *string
	title                    *string
	description              *string
	url                      *string
	enable_js_rendering      *bool
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	scraping_selector        *int
	clearedscraping_selector bool
	done                     bool
	oldValue                 func(context.Context) (*Site, error)
	predicates               []predicate.Site
}

var _ ent.Mutation = (*SiteMutation)(nil)

// siteOption allows management of the mutation configuration using functional options.
type siteOption func(*SiteMutation)

// newSiteMutation creates new mutation for the Site entity.
func newSiteMutation(c config, op Op, opts ...siteOption) *SiteMutation {
	m := &SiteMutation{
		config:        c,
		op:            op,
		typ:           TypeSite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSiteID sets the ID field of the mutation.
func withSiteID(id int) siteOption {
	return func(m *SiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Site
		)
		m.oldValue = func(ctx context.Context) (*Site, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Site.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSite sets the old Site of the mutation.
func withSite(node *Site) siteOption {
	return func(m *SiteMutation) {
		m.oldValue = func(context.Context) (*Site, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Site entities.
func (m *SiteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SiteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SiteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Site.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlug sets the "slug" field.
func (m *SiteMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *SiteMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *SiteMutation) ResetSlug() {
	m.slug = nil
}

// SetTitle sets the "title" field.
func (m *SiteMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SiteMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SiteMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *SiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SiteMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[site.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SiteMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[site.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SiteMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, site.FieldDescription)
}

// SetURL sets the "url" field.
func (m *SiteMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SiteMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SiteMutation) ResetURL() {
	m.url = nil
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (m *SiteMutation) SetEnableJsRendering(b bool) {
	m.enable_js_rendering = &b
}

// EnableJsRendering returns the value of the "enable_js_rendering" field in the mutation.
func (m *SiteMutation) EnableJsRendering() (r bool, exists bool) {
	v := m.enable_js_rendering
	if v == nil {
		return
	}
	return *v, true
}

// OldEnableJsRendering returns the old "enable_js_rendering" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldEnableJsRendering(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnableJsRendering is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnableJsRendering requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnableJsRendering: %w", err)
	}
	return oldValue.EnableJsRendering, nil
}

// ResetEnableJsRendering resets all changes to the "enable_js_rendering" field.
func (m *SiteMutation) ResetEnableJsRendering() {
	m.enable_js_rendering = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SiteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SiteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SiteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SiteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SiteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SiteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetScrapingSelectorID sets the "scraping_selector" edge to the ScrapingSelector entity by id.
func (m *SiteMutation) SetScrapingSelectorID(id int) {
	m.scraping_selector = &id
}

// ClearScrapingSelector clears the "scraping_selector" edge to the ScrapingSelector entity.
func (m *SiteMutation) ClearScrapingSelector() {
	m.clearedscraping_selector = true
}

// ScrapingSelectorCleared reports if the "scraping_selector" edge to the ScrapingSelector entity was cleared.
func (m *SiteMutation) ScrapingSelectorCleared() bool {
	return m.clearedscraping_selector
}

// ScrapingSelectorID returns the "scraping_selector" edge ID in the mutation.
func (m *SiteMutation) ScrapingSelectorID() (id int, exists bool) {
	if m.scraping_selector != nil {
		return *m.scraping_selector, true
	}
	return
}

// ScrapingSelectorIDs returns the "scraping_selector" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScrapingSelectorID instead. It exists only for internal usage by the builders.
func (m *SiteMutation) ScrapingSelectorIDs() (ids []int) {
	if id := m.scraping_selector; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScrapingSelector resets all changes to the "scraping_selector" edge.
func (m *SiteMutation) ResetScrapingSelector() {
	m.scraping_selector = nil
	m.clearedscraping_selector = false
}

// Where appends a list predicates to the SiteMutation builder.
func (m *SiteMutation) Where(ps ...predicate.Site) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Site, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Site).
func (m *SiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SiteMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.slug != nil {
		fields = append(fields, site.FieldSlug)
	}
	if m.title != nil {
		fields = append(fields, site.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, site.FieldDescription)
	}
	if m.url != nil {
		fields = append(fields, site.FieldURL)
	}
	if m.enable_js_rendering != nil {
		fields = append(fields, site.FieldEnableJsRendering)
	}
	if m.created_at != nil {
		fields = append(fields, site.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, site.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case site.FieldSlug:
		return m.Slug()
	case site.FieldTitle:
		return m.Title()
	case site.FieldDescription:
		return m.Description()
	case site.FieldURL:
		return m.URL()
	case site.FieldEnableJsRendering:
		return m.EnableJsRendering()
	case site.FieldCreatedAt:
		return m.CreatedAt()
	case site.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case site.FieldSlug:
		return m.OldSlug(ctx)
	case site.FieldTitle:
		return m.OldTitle(ctx)
	case site.FieldDescription:
		return m.OldDescription(ctx)
	case site.FieldURL:
		return m.OldURL(ctx)
	case site.FieldEnableJsRendering:
		return m.OldEnableJsRendering(ctx)
	case site.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case site.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Site field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case site.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case site.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case site.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case site.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case site.FieldEnableJsRendering:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnableJsRendering(v)
		return nil
	case site.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case site.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SiteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SiteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Site numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(site.FieldDescription) {
		fields = append(fields, site.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SiteMutation) ClearField(name string) error {
	switch name {
	case site.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Site nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SiteMutation) ResetField(name string) error {
	switch name {
	case site.FieldSlug:
		m.ResetSlug()
		return nil
	case site.FieldTitle:
		m.ResetTitle()
		return nil
	case site.FieldDescription:
		m.ResetDescription()
		return nil
	case site.FieldURL:
		m.ResetURL()
		return nil
	case site.FieldEnableJsRendering:
		m.ResetEnableJsRendering()
		return nil
	case site.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case site.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.scraping_selector != nil {
		edges = append(edges, site.EdgeScrapingSelector)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SiteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case site.EdgeScrapingSelector:
		if id := m.scraping_selector; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SiteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscraping_selector {
		edges = append(edges, site.EdgeScrapingSelector)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SiteMutation) EdgeCleared(name string) bool {
	switch name {
	case site.EdgeScrapingSelector:
		return m.clearedscraping_selector
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SiteMutation) ClearEdge(name string) error {
	switch name {
	case site.EdgeScrapingSelector:
		m.ClearScrapingSelector()
		return nil
	}
	return fmt.Errorf("unknown Site unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SiteMutation) ResetEdge(name string) error {
	switch name {
	case site.EdgeScrapingSelector:
		m.ResetScrapingSelector()
		return nil
	}
	return fmt.Errorf("unknown Site edge %s", name)
}
