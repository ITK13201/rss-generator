// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ITK13201/rss-generator/ent/feed"
	"github.com/ITK13201/rss-generator/ent/feeditem"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/scrapingsetting"
	"github.com/ITK13201/rss-generator/ent/site"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFeed            = "Feed"
	TypeFeedItem        = "FeedItem"
	TypeScrapingSetting = "ScrapingSetting"
	TypeSite            = "Site"
	TypeTestFeed        = "TestFeed"
	TypeTestFeedItem    = "TestFeedItem"
)

// FeedMutation represents an operation that mutates the Feed nodes in the graph.
type FeedMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	title             *string
	description       *string
	link              *string
	published_at      *time.Time
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	site              *int
	clearedsite       bool
	feed_items        map[int]struct{}
	removedfeed_items map[int]struct{}
	clearedfeed_items bool
	done              bool
	oldValue          func(context.Context) (*Feed, error)
	predicates        []predicate.Feed
}

var _ ent.Mutation = (*FeedMutation)(nil)

// feedOption allows management of the mutation configuration using functional options.
type feedOption func(*FeedMutation)

// newFeedMutation creates new mutation for the Feed entity.
func newFeedMutation(c config, op Op, opts ...feedOption) *FeedMutation {
	m := &FeedMutation{
		config:        c,
		op:            op,
		typ:           TypeFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedID sets the ID field of the mutation.
func withFeedID(id uuid.UUID) feedOption {
	return func(m *FeedMutation) {
		var (
			err   error
			once  sync.Once
			value *Feed
		)
		m.oldValue = func(ctx context.Context) (*Feed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeed sets the old Feed of the mutation.
func withFeed(node *Feed) feedOption {
	return func(m *FeedMutation) {
		m.oldValue = func(context.Context) (*Feed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Feed entities.
func (m *FeedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *FeedMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FeedMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *FeedMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FeedMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *FeedMutation) ResetLink() {
	m.link = nil
}

// SetPublishedAt sets the "published_at" field.
func (m *FeedMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *FeedMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *FeedMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSiteID sets the "site" edge to the Site entity by id.
func (m *FeedMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the Site entity.
func (m *FeedMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the Site entity was cleared.
func (m *FeedMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *FeedMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *FeedMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *FeedMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// AddFeedItemIDs adds the "feed_items" edge to the FeedItem entity by ids.
func (m *FeedMutation) AddFeedItemIDs(ids ...int) {
	if m.feed_items == nil {
		m.feed_items = make(map[int]struct{})
	}
	for i := range ids {
		m.feed_items[ids[i]] = struct{}{}
	}
}

// ClearFeedItems clears the "feed_items" edge to the FeedItem entity.
func (m *FeedMutation) ClearFeedItems() {
	m.clearedfeed_items = true
}

// FeedItemsCleared reports if the "feed_items" edge to the FeedItem entity was cleared.
func (m *FeedMutation) FeedItemsCleared() bool {
	return m.clearedfeed_items
}

// RemoveFeedItemIDs removes the "feed_items" edge to the FeedItem entity by IDs.
func (m *FeedMutation) RemoveFeedItemIDs(ids ...int) {
	if m.removedfeed_items == nil {
		m.removedfeed_items = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.feed_items, ids[i])
		m.removedfeed_items[ids[i]] = struct{}{}
	}
}

// RemovedFeedItems returns the removed IDs of the "feed_items" edge to the FeedItem entity.
func (m *FeedMutation) RemovedFeedItemsIDs() (ids []int) {
	for id := range m.removedfeed_items {
		ids = append(ids, id)
	}
	return
}

// FeedItemsIDs returns the "feed_items" edge IDs in the mutation.
func (m *FeedMutation) FeedItemsIDs() (ids []int) {
	for id := range m.feed_items {
		ids = append(ids, id)
	}
	return
}

// ResetFeedItems resets all changes to the "feed_items" edge.
func (m *FeedMutation) ResetFeedItems() {
	m.feed_items = nil
	m.clearedfeed_items = false
	m.removedfeed_items = nil
}

// Where appends a list predicates to the FeedMutation builder.
func (m *FeedMutation) Where(ps ...predicate.Feed) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Feed, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Feed).
func (m *FeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, feed.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, feed.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, feed.FieldLink)
	}
	if m.published_at != nil {
		fields = append(fields, feed.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feed.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, feed.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldTitle:
		return m.Title()
	case feed.FieldDescription:
		return m.Description()
	case feed.FieldLink:
		return m.Link()
	case feed.FieldPublishedAt:
		return m.PublishedAt()
	case feed.FieldCreatedAt:
		return m.CreatedAt()
	case feed.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feed.FieldTitle:
		return m.OldTitle(ctx)
	case feed.FieldDescription:
		return m.OldDescription(ctx)
	case feed.FieldLink:
		return m.OldLink(ctx)
	case feed.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case feed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case feed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Feed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feed.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case feed.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feed.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case feed.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case feed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case feed.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Feed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Feed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedMutation) ResetField(name string) error {
	switch name {
	case feed.FieldTitle:
		m.ResetTitle()
		return nil
	case feed.FieldDescription:
		m.ResetDescription()
		return nil
	case feed.FieldLink:
		m.ResetLink()
		return nil
	case feed.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case feed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case feed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.site != nil {
		edges = append(edges, feed.EdgeSite)
	}
	if m.feed_items != nil {
		edges = append(edges, feed.EdgeFeedItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	case feed.EdgeFeedItems:
		ids := make([]ent.Value, 0, len(m.feed_items))
		for id := range m.feed_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfeed_items != nil {
		edges = append(edges, feed.EdgeFeedItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeFeedItems:
		ids := make([]ent.Value, 0, len(m.removedfeed_items))
		for id := range m.removedfeed_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsite {
		edges = append(edges, feed.EdgeSite)
	}
	if m.clearedfeed_items {
		edges = append(edges, feed.EdgeFeedItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedMutation) EdgeCleared(name string) bool {
	switch name {
	case feed.EdgeSite:
		return m.clearedsite
	case feed.EdgeFeedItems:
		return m.clearedfeed_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedMutation) ClearEdge(name string) error {
	switch name {
	case feed.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown Feed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedMutation) ResetEdge(name string) error {
	switch name {
	case feed.EdgeSite:
		m.ResetSite()
		return nil
	case feed.EdgeFeedItems:
		m.ResetFeedItems()
		return nil
	}
	return fmt.Errorf("unknown Feed edge %s", name)
}

// FeedItemMutation represents an operation that mutates the FeedItem nodes in the graph.
type FeedItemMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	description   *string
	link          *string
	published_at  *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	feed          *uuid.UUID
	clearedfeed   bool
	done          bool
	oldValue      func(context.Context) (*FeedItem, error)
	predicates    []predicate.FeedItem
}

var _ ent.Mutation = (*FeedItemMutation)(nil)

// feeditemOption allows management of the mutation configuration using functional options.
type feeditemOption func(*FeedItemMutation)

// newFeedItemMutation creates new mutation for the FeedItem entity.
func newFeedItemMutation(c config, op Op, opts ...feeditemOption) *FeedItemMutation {
	m := &FeedItemMutation{
		config:        c,
		op:            op,
		typ:           TypeFeedItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedItemID sets the ID field of the mutation.
func withFeedItemID(id int) feeditemOption {
	return func(m *FeedItemMutation) {
		var (
			err   error
			once  sync.Once
			value *FeedItem
		)
		m.oldValue = func(ctx context.Context) (*FeedItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeedItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeedItem sets the old FeedItem of the mutation.
func withFeedItem(node *FeedItem) feeditemOption {
	return func(m *FeedItemMutation) {
		m.oldValue = func(context.Context) (*FeedItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FeedItem entities.
func (m *FeedItemMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FeedItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *FeedItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedItemMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FeedItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedItemMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *FeedItemMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FeedItemMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *FeedItemMutation) ClearLink() {
	m.link = nil
	m.clearedFields[feeditem.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *FeedItemMutation) LinkCleared() bool {
	_, ok := m.clearedFields[feeditem.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *FeedItemMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, feeditem.FieldLink)
}

// SetPublishedAt sets the "published_at" field.
func (m *FeedItemMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *FeedItemMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *FeedItemMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFeedID sets the "feed" edge to the Feed entity by id.
func (m *FeedItemMutation) SetFeedID(id uuid.UUID) {
	m.feed = &id
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (m *FeedItemMutation) ClearFeed() {
	m.clearedfeed = true
}

// FeedCleared reports if the "feed" edge to the Feed entity was cleared.
func (m *FeedItemMutation) FeedCleared() bool {
	return m.clearedfeed
}

// FeedID returns the "feed" edge ID in the mutation.
func (m *FeedItemMutation) FeedID() (id uuid.UUID, exists bool) {
	if m.feed != nil {
		return *m.feed, true
	}
	return
}

// FeedIDs returns the "feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FeedID instead. It exists only for internal usage by the builders.
func (m *FeedItemMutation) FeedIDs() (ids []uuid.UUID) {
	if id := m.feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFeed resets all changes to the "feed" edge.
func (m *FeedItemMutation) ResetFeed() {
	m.feed = nil
	m.clearedfeed = false
}

// Where appends a list predicates to the FeedItemMutation builder.
func (m *FeedItemMutation) Where(ps ...predicate.FeedItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FeedItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FeedItem).
func (m *FeedItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedItemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, feeditem.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, feeditem.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, feeditem.FieldLink)
	}
	if m.published_at != nil {
		fields = append(fields, feeditem.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feeditem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, feeditem.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feeditem.FieldTitle:
		return m.Title()
	case feeditem.FieldDescription:
		return m.Description()
	case feeditem.FieldLink:
		return m.Link()
	case feeditem.FieldPublishedAt:
		return m.PublishedAt()
	case feeditem.FieldCreatedAt:
		return m.CreatedAt()
	case feeditem.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feeditem.FieldTitle:
		return m.OldTitle(ctx)
	case feeditem.FieldDescription:
		return m.OldDescription(ctx)
	case feeditem.FieldLink:
		return m.OldLink(ctx)
	case feeditem.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case feeditem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case feeditem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FeedItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feeditem.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case feeditem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feeditem.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case feeditem.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case feeditem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case feeditem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeedItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FeedItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(feeditem.FieldLink) {
		fields = append(fields, feeditem.FieldLink)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedItemMutation) ClearField(name string) error {
	switch name {
	case feeditem.FieldLink:
		m.ClearLink()
		return nil
	}
	return fmt.Errorf("unknown FeedItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedItemMutation) ResetField(name string) error {
	switch name {
	case feeditem.FieldTitle:
		m.ResetTitle()
		return nil
	case feeditem.FieldDescription:
		m.ResetDescription()
		return nil
	case feeditem.FieldLink:
		m.ResetLink()
		return nil
	case feeditem.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case feeditem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case feeditem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FeedItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.feed != nil {
		edges = append(edges, feeditem.EdgeFeed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feeditem.EdgeFeed:
		if id := m.feed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfeed {
		edges = append(edges, feeditem.EdgeFeed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedItemMutation) EdgeCleared(name string) bool {
	switch name {
	case feeditem.EdgeFeed:
		return m.clearedfeed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedItemMutation) ClearEdge(name string) error {
	switch name {
	case feeditem.EdgeFeed:
		m.ClearFeed()
		return nil
	}
	return fmt.Errorf("unknown FeedItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedItemMutation) ResetEdge(name string) error {
	switch name {
	case feeditem.EdgeFeed:
		m.ResetFeed()
		return nil
	}
	return fmt.Errorf("unknown FeedItem edge %s", name)
}

// ScrapingSettingMutation represents an operation that mutates the ScrapingSetting nodes in the graph.
type ScrapingSettingMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	selector             *string
	inner_selector       *string
	title_selector       *string
	description_selector *string
	link_selector        *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	site                 *int
	clearedsite          bool
	done                 bool
	oldValue             func(context.Context) (*ScrapingSetting, error)
	predicates           []predicate.ScrapingSetting
}

var _ ent.Mutation = (*ScrapingSettingMutation)(nil)

// scrapingsettingOption allows management of the mutation configuration using functional options.
type scrapingsettingOption func(*ScrapingSettingMutation)

// newScrapingSettingMutation creates new mutation for the ScrapingSetting entity.
func newScrapingSettingMutation(c config, op Op, opts ...scrapingsettingOption) *ScrapingSettingMutation {
	m := &ScrapingSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeScrapingSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScrapingSettingID sets the ID field of the mutation.
func withScrapingSettingID(id int) scrapingsettingOption {
	return func(m *ScrapingSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *ScrapingSetting
		)
		m.oldValue = func(ctx context.Context) (*ScrapingSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ScrapingSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScrapingSetting sets the old ScrapingSetting of the mutation.
func withScrapingSetting(node *ScrapingSetting) scrapingsettingOption {
	return func(m *ScrapingSettingMutation) {
		m.oldValue = func(context.Context) (*ScrapingSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScrapingSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScrapingSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ScrapingSetting entities.
func (m *ScrapingSettingMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScrapingSettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScrapingSettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ScrapingSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSelector sets the "selector" field.
func (m *ScrapingSettingMutation) SetSelector(s string) {
	m.selector = &s
}

// Selector returns the value of the "selector" field in the mutation.
func (m *ScrapingSettingMutation) Selector() (r string, exists bool) {
	v := m.selector
	if v == nil {
		return
	}
	return *v, true
}

// OldSelector returns the old "selector" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelector: %w", err)
	}
	return oldValue.Selector, nil
}

// ResetSelector resets all changes to the "selector" field.
func (m *ScrapingSettingMutation) ResetSelector() {
	m.selector = nil
}

// SetInnerSelector sets the "inner_selector" field.
func (m *ScrapingSettingMutation) SetInnerSelector(s string) {
	m.inner_selector = &s
}

// InnerSelector returns the value of the "inner_selector" field in the mutation.
func (m *ScrapingSettingMutation) InnerSelector() (r string, exists bool) {
	v := m.inner_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldInnerSelector returns the old "inner_selector" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldInnerSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInnerSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInnerSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInnerSelector: %w", err)
	}
	return oldValue.InnerSelector, nil
}

// ResetInnerSelector resets all changes to the "inner_selector" field.
func (m *ScrapingSettingMutation) ResetInnerSelector() {
	m.inner_selector = nil
}

// SetTitleSelector sets the "title_selector" field.
func (m *ScrapingSettingMutation) SetTitleSelector(s string) {
	m.title_selector = &s
}

// TitleSelector returns the value of the "title_selector" field in the mutation.
func (m *ScrapingSettingMutation) TitleSelector() (r string, exists bool) {
	v := m.title_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleSelector returns the old "title_selector" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldTitleSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleSelector: %w", err)
	}
	return oldValue.TitleSelector, nil
}

// ResetTitleSelector resets all changes to the "title_selector" field.
func (m *ScrapingSettingMutation) ResetTitleSelector() {
	m.title_selector = nil
}

// SetDescriptionSelector sets the "description_selector" field.
func (m *ScrapingSettingMutation) SetDescriptionSelector(s string) {
	m.description_selector = &s
}

// DescriptionSelector returns the value of the "description_selector" field in the mutation.
func (m *ScrapingSettingMutation) DescriptionSelector() (r string, exists bool) {
	v := m.description_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionSelector returns the old "description_selector" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldDescriptionSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionSelector: %w", err)
	}
	return oldValue.DescriptionSelector, nil
}

// ClearDescriptionSelector clears the value of the "description_selector" field.
func (m *ScrapingSettingMutation) ClearDescriptionSelector() {
	m.description_selector = nil
	m.clearedFields[scrapingsetting.FieldDescriptionSelector] = struct{}{}
}

// DescriptionSelectorCleared returns if the "description_selector" field was cleared in this mutation.
func (m *ScrapingSettingMutation) DescriptionSelectorCleared() bool {
	_, ok := m.clearedFields[scrapingsetting.FieldDescriptionSelector]
	return ok
}

// ResetDescriptionSelector resets all changes to the "description_selector" field.
func (m *ScrapingSettingMutation) ResetDescriptionSelector() {
	m.description_selector = nil
	delete(m.clearedFields, scrapingsetting.FieldDescriptionSelector)
}

// SetLinkSelector sets the "link_selector" field.
func (m *ScrapingSettingMutation) SetLinkSelector(s string) {
	m.link_selector = &s
}

// LinkSelector returns the value of the "link_selector" field in the mutation.
func (m *ScrapingSettingMutation) LinkSelector() (r string, exists bool) {
	v := m.link_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkSelector returns the old "link_selector" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldLinkSelector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkSelector: %w", err)
	}
	return oldValue.LinkSelector, nil
}

// ClearLinkSelector clears the value of the "link_selector" field.
func (m *ScrapingSettingMutation) ClearLinkSelector() {
	m.link_selector = nil
	m.clearedFields[scrapingsetting.FieldLinkSelector] = struct{}{}
}

// LinkSelectorCleared returns if the "link_selector" field was cleared in this mutation.
func (m *ScrapingSettingMutation) LinkSelectorCleared() bool {
	_, ok := m.clearedFields[scrapingsetting.FieldLinkSelector]
	return ok
}

// ResetLinkSelector resets all changes to the "link_selector" field.
func (m *ScrapingSettingMutation) ResetLinkSelector() {
	m.link_selector = nil
	delete(m.clearedFields, scrapingsetting.FieldLinkSelector)
}

// SetCreatedAt sets the "created_at" field.
func (m *ScrapingSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ScrapingSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ScrapingSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ScrapingSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ScrapingSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ScrapingSetting entity.
// If the ScrapingSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScrapingSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ScrapingSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSiteID sets the "site" edge to the Site entity by id.
func (m *ScrapingSettingMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the Site entity.
func (m *ScrapingSettingMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the Site entity was cleared.
func (m *ScrapingSettingMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *ScrapingSettingMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *ScrapingSettingMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *ScrapingSettingMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// Where appends a list predicates to the ScrapingSettingMutation builder.
func (m *ScrapingSettingMutation) Where(ps ...predicate.ScrapingSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScrapingSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScrapingSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ScrapingSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScrapingSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScrapingSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ScrapingSetting).
func (m *ScrapingSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScrapingSettingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.selector != nil {
		fields = append(fields, scrapingsetting.FieldSelector)
	}
	if m.inner_selector != nil {
		fields = append(fields, scrapingsetting.FieldInnerSelector)
	}
	if m.title_selector != nil {
		fields = append(fields, scrapingsetting.FieldTitleSelector)
	}
	if m.description_selector != nil {
		fields = append(fields, scrapingsetting.FieldDescriptionSelector)
	}
	if m.link_selector != nil {
		fields = append(fields, scrapingsetting.FieldLinkSelector)
	}
	if m.created_at != nil {
		fields = append(fields, scrapingsetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, scrapingsetting.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScrapingSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scrapingsetting.FieldSelector:
		return m.Selector()
	case scrapingsetting.FieldInnerSelector:
		return m.InnerSelector()
	case scrapingsetting.FieldTitleSelector:
		return m.TitleSelector()
	case scrapingsetting.FieldDescriptionSelector:
		return m.DescriptionSelector()
	case scrapingsetting.FieldLinkSelector:
		return m.LinkSelector()
	case scrapingsetting.FieldCreatedAt:
		return m.CreatedAt()
	case scrapingsetting.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScrapingSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scrapingsetting.FieldSelector:
		return m.OldSelector(ctx)
	case scrapingsetting.FieldInnerSelector:
		return m.OldInnerSelector(ctx)
	case scrapingsetting.FieldTitleSelector:
		return m.OldTitleSelector(ctx)
	case scrapingsetting.FieldDescriptionSelector:
		return m.OldDescriptionSelector(ctx)
	case scrapingsetting.FieldLinkSelector:
		return m.OldLinkSelector(ctx)
	case scrapingsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case scrapingsetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ScrapingSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScrapingSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scrapingsetting.FieldSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelector(v)
		return nil
	case scrapingsetting.FieldInnerSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInnerSelector(v)
		return nil
	case scrapingsetting.FieldTitleSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleSelector(v)
		return nil
	case scrapingsetting.FieldDescriptionSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionSelector(v)
		return nil
	case scrapingsetting.FieldLinkSelector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkSelector(v)
		return nil
	case scrapingsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case scrapingsetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ScrapingSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScrapingSettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScrapingSettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScrapingSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ScrapingSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScrapingSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scrapingsetting.FieldDescriptionSelector) {
		fields = append(fields, scrapingsetting.FieldDescriptionSelector)
	}
	if m.FieldCleared(scrapingsetting.FieldLinkSelector) {
		fields = append(fields, scrapingsetting.FieldLinkSelector)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScrapingSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScrapingSettingMutation) ClearField(name string) error {
	switch name {
	case scrapingsetting.FieldDescriptionSelector:
		m.ClearDescriptionSelector()
		return nil
	case scrapingsetting.FieldLinkSelector:
		m.ClearLinkSelector()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScrapingSettingMutation) ResetField(name string) error {
	switch name {
	case scrapingsetting.FieldSelector:
		m.ResetSelector()
		return nil
	case scrapingsetting.FieldInnerSelector:
		m.ResetInnerSelector()
		return nil
	case scrapingsetting.FieldTitleSelector:
		m.ResetTitleSelector()
		return nil
	case scrapingsetting.FieldDescriptionSelector:
		m.ResetDescriptionSelector()
		return nil
	case scrapingsetting.FieldLinkSelector:
		m.ResetLinkSelector()
		return nil
	case scrapingsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case scrapingsetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScrapingSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.site != nil {
		edges = append(edges, scrapingsetting.EdgeSite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScrapingSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scrapingsetting.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScrapingSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScrapingSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScrapingSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsite {
		edges = append(edges, scrapingsetting.EdgeSite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScrapingSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case scrapingsetting.EdgeSite:
		return m.clearedsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScrapingSettingMutation) ClearEdge(name string) error {
	switch name {
	case scrapingsetting.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScrapingSettingMutation) ResetEdge(name string) error {
	switch name {
	case scrapingsetting.EdgeSite:
		m.ResetSite()
		return nil
	}
	return fmt.Errorf("unknown ScrapingSetting edge %s", name)
}

// SiteMutation represents an operation that mutates the Site nodes in the graph.
type SiteMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	slug                     *string
	title                    *string
	description              *string
	url                      *string
	enable_js_rendering      *bool
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	scraping_settings        map[int]struct{}
	removedscraping_settings map[int]struct{}
	clearedscraping_settings bool
	feeds                    map[uuid.UUID]struct{}
	removedfeeds             map[uuid.UUID]struct{}
	clearedfeeds             bool
	test_feeds               map[uuid.UUID]struct{}
	removedtest_feeds        map[uuid.UUID]struct{}
	clearedtest_feeds        bool
	done                     bool
	oldValue                 func(context.Context) (*Site, error)
	predicates               []predicate.Site
}

var _ ent.Mutation = (*SiteMutation)(nil)

// siteOption allows management of the mutation configuration using functional options.
type siteOption func(*SiteMutation)

// newSiteMutation creates new mutation for the Site entity.
func newSiteMutation(c config, op Op, opts ...siteOption) *SiteMutation {
	m := &SiteMutation{
		config:        c,
		op:            op,
		typ:           TypeSite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSiteID sets the ID field of the mutation.
func withSiteID(id int) siteOption {
	return func(m *SiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Site
		)
		m.oldValue = func(ctx context.Context) (*Site, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Site.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSite sets the old Site of the mutation.
func withSite(node *Site) siteOption {
	return func(m *SiteMutation) {
		m.oldValue = func(context.Context) (*Site, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Site entities.
func (m *SiteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SiteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SiteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Site.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlug sets the "slug" field.
func (m *SiteMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *SiteMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *SiteMutation) ResetSlug() {
	m.slug = nil
}

// SetTitle sets the "title" field.
func (m *SiteMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SiteMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SiteMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *SiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SiteMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[site.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SiteMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[site.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SiteMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, site.FieldDescription)
}

// SetURL sets the "url" field.
func (m *SiteMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SiteMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SiteMutation) ResetURL() {
	m.url = nil
}

// SetEnableJsRendering sets the "enable_js_rendering" field.
func (m *SiteMutation) SetEnableJsRendering(b bool) {
	m.enable_js_rendering = &b
}

// EnableJsRendering returns the value of the "enable_js_rendering" field in the mutation.
func (m *SiteMutation) EnableJsRendering() (r bool, exists bool) {
	v := m.enable_js_rendering
	if v == nil {
		return
	}
	return *v, true
}

// OldEnableJsRendering returns the old "enable_js_rendering" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldEnableJsRendering(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnableJsRendering is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnableJsRendering requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnableJsRendering: %w", err)
	}
	return oldValue.EnableJsRendering, nil
}

// ResetEnableJsRendering resets all changes to the "enable_js_rendering" field.
func (m *SiteMutation) ResetEnableJsRendering() {
	m.enable_js_rendering = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SiteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SiteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SiteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SiteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SiteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SiteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddScrapingSettingIDs adds the "scraping_settings" edge to the ScrapingSetting entity by ids.
func (m *SiteMutation) AddScrapingSettingIDs(ids ...int) {
	if m.scraping_settings == nil {
		m.scraping_settings = make(map[int]struct{})
	}
	for i := range ids {
		m.scraping_settings[ids[i]] = struct{}{}
	}
}

// ClearScrapingSettings clears the "scraping_settings" edge to the ScrapingSetting entity.
func (m *SiteMutation) ClearScrapingSettings() {
	m.clearedscraping_settings = true
}

// ScrapingSettingsCleared reports if the "scraping_settings" edge to the ScrapingSetting entity was cleared.
func (m *SiteMutation) ScrapingSettingsCleared() bool {
	return m.clearedscraping_settings
}

// RemoveScrapingSettingIDs removes the "scraping_settings" edge to the ScrapingSetting entity by IDs.
func (m *SiteMutation) RemoveScrapingSettingIDs(ids ...int) {
	if m.removedscraping_settings == nil {
		m.removedscraping_settings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.scraping_settings, ids[i])
		m.removedscraping_settings[ids[i]] = struct{}{}
	}
}

// RemovedScrapingSettings returns the removed IDs of the "scraping_settings" edge to the ScrapingSetting entity.
func (m *SiteMutation) RemovedScrapingSettingsIDs() (ids []int) {
	for id := range m.removedscraping_settings {
		ids = append(ids, id)
	}
	return
}

// ScrapingSettingsIDs returns the "scraping_settings" edge IDs in the mutation.
func (m *SiteMutation) ScrapingSettingsIDs() (ids []int) {
	for id := range m.scraping_settings {
		ids = append(ids, id)
	}
	return
}

// ResetScrapingSettings resets all changes to the "scraping_settings" edge.
func (m *SiteMutation) ResetScrapingSettings() {
	m.scraping_settings = nil
	m.clearedscraping_settings = false
	m.removedscraping_settings = nil
}

// AddFeedIDs adds the "feeds" edge to the Feed entity by ids.
func (m *SiteMutation) AddFeedIDs(ids ...uuid.UUID) {
	if m.feeds == nil {
		m.feeds = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.feeds[ids[i]] = struct{}{}
	}
}

// ClearFeeds clears the "feeds" edge to the Feed entity.
func (m *SiteMutation) ClearFeeds() {
	m.clearedfeeds = true
}

// FeedsCleared reports if the "feeds" edge to the Feed entity was cleared.
func (m *SiteMutation) FeedsCleared() bool {
	return m.clearedfeeds
}

// RemoveFeedIDs removes the "feeds" edge to the Feed entity by IDs.
func (m *SiteMutation) RemoveFeedIDs(ids ...uuid.UUID) {
	if m.removedfeeds == nil {
		m.removedfeeds = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.feeds, ids[i])
		m.removedfeeds[ids[i]] = struct{}{}
	}
}

// RemovedFeeds returns the removed IDs of the "feeds" edge to the Feed entity.
func (m *SiteMutation) RemovedFeedsIDs() (ids []uuid.UUID) {
	for id := range m.removedfeeds {
		ids = append(ids, id)
	}
	return
}

// FeedsIDs returns the "feeds" edge IDs in the mutation.
func (m *SiteMutation) FeedsIDs() (ids []uuid.UUID) {
	for id := range m.feeds {
		ids = append(ids, id)
	}
	return
}

// ResetFeeds resets all changes to the "feeds" edge.
func (m *SiteMutation) ResetFeeds() {
	m.feeds = nil
	m.clearedfeeds = false
	m.removedfeeds = nil
}

// AddTestFeedIDs adds the "test_feeds" edge to the TestFeed entity by ids.
func (m *SiteMutation) AddTestFeedIDs(ids ...uuid.UUID) {
	if m.test_feeds == nil {
		m.test_feeds = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.test_feeds[ids[i]] = struct{}{}
	}
}

// ClearTestFeeds clears the "test_feeds" edge to the TestFeed entity.
func (m *SiteMutation) ClearTestFeeds() {
	m.clearedtest_feeds = true
}

// TestFeedsCleared reports if the "test_feeds" edge to the TestFeed entity was cleared.
func (m *SiteMutation) TestFeedsCleared() bool {
	return m.clearedtest_feeds
}

// RemoveTestFeedIDs removes the "test_feeds" edge to the TestFeed entity by IDs.
func (m *SiteMutation) RemoveTestFeedIDs(ids ...uuid.UUID) {
	if m.removedtest_feeds == nil {
		m.removedtest_feeds = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.test_feeds, ids[i])
		m.removedtest_feeds[ids[i]] = struct{}{}
	}
}

// RemovedTestFeeds returns the removed IDs of the "test_feeds" edge to the TestFeed entity.
func (m *SiteMutation) RemovedTestFeedsIDs() (ids []uuid.UUID) {
	for id := range m.removedtest_feeds {
		ids = append(ids, id)
	}
	return
}

// TestFeedsIDs returns the "test_feeds" edge IDs in the mutation.
func (m *SiteMutation) TestFeedsIDs() (ids []uuid.UUID) {
	for id := range m.test_feeds {
		ids = append(ids, id)
	}
	return
}

// ResetTestFeeds resets all changes to the "test_feeds" edge.
func (m *SiteMutation) ResetTestFeeds() {
	m.test_feeds = nil
	m.clearedtest_feeds = false
	m.removedtest_feeds = nil
}

// Where appends a list predicates to the SiteMutation builder.
func (m *SiteMutation) Where(ps ...predicate.Site) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Site, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Site).
func (m *SiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SiteMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.slug != nil {
		fields = append(fields, site.FieldSlug)
	}
	if m.title != nil {
		fields = append(fields, site.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, site.FieldDescription)
	}
	if m.url != nil {
		fields = append(fields, site.FieldURL)
	}
	if m.enable_js_rendering != nil {
		fields = append(fields, site.FieldEnableJsRendering)
	}
	if m.created_at != nil {
		fields = append(fields, site.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, site.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case site.FieldSlug:
		return m.Slug()
	case site.FieldTitle:
		return m.Title()
	case site.FieldDescription:
		return m.Description()
	case site.FieldURL:
		return m.URL()
	case site.FieldEnableJsRendering:
		return m.EnableJsRendering()
	case site.FieldCreatedAt:
		return m.CreatedAt()
	case site.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case site.FieldSlug:
		return m.OldSlug(ctx)
	case site.FieldTitle:
		return m.OldTitle(ctx)
	case site.FieldDescription:
		return m.OldDescription(ctx)
	case site.FieldURL:
		return m.OldURL(ctx)
	case site.FieldEnableJsRendering:
		return m.OldEnableJsRendering(ctx)
	case site.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case site.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Site field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case site.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case site.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case site.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case site.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case site.FieldEnableJsRendering:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnableJsRendering(v)
		return nil
	case site.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case site.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SiteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SiteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Site numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(site.FieldDescription) {
		fields = append(fields, site.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SiteMutation) ClearField(name string) error {
	switch name {
	case site.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Site nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SiteMutation) ResetField(name string) error {
	switch name {
	case site.FieldSlug:
		m.ResetSlug()
		return nil
	case site.FieldTitle:
		m.ResetTitle()
		return nil
	case site.FieldDescription:
		m.ResetDescription()
		return nil
	case site.FieldURL:
		m.ResetURL()
		return nil
	case site.FieldEnableJsRendering:
		m.ResetEnableJsRendering()
		return nil
	case site.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case site.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.scraping_settings != nil {
		edges = append(edges, site.EdgeScrapingSettings)
	}
	if m.feeds != nil {
		edges = append(edges, site.EdgeFeeds)
	}
	if m.test_feeds != nil {
		edges = append(edges, site.EdgeTestFeeds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SiteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case site.EdgeScrapingSettings:
		ids := make([]ent.Value, 0, len(m.scraping_settings))
		for id := range m.scraping_settings {
			ids = append(ids, id)
		}
		return ids
	case site.EdgeFeeds:
		ids := make([]ent.Value, 0, len(m.feeds))
		for id := range m.feeds {
			ids = append(ids, id)
		}
		return ids
	case site.EdgeTestFeeds:
		ids := make([]ent.Value, 0, len(m.test_feeds))
		for id := range m.test_feeds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedscraping_settings != nil {
		edges = append(edges, site.EdgeScrapingSettings)
	}
	if m.removedfeeds != nil {
		edges = append(edges, site.EdgeFeeds)
	}
	if m.removedtest_feeds != nil {
		edges = append(edges, site.EdgeTestFeeds)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SiteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case site.EdgeScrapingSettings:
		ids := make([]ent.Value, 0, len(m.removedscraping_settings))
		for id := range m.removedscraping_settings {
			ids = append(ids, id)
		}
		return ids
	case site.EdgeFeeds:
		ids := make([]ent.Value, 0, len(m.removedfeeds))
		for id := range m.removedfeeds {
			ids = append(ids, id)
		}
		return ids
	case site.EdgeTestFeeds:
		ids := make([]ent.Value, 0, len(m.removedtest_feeds))
		for id := range m.removedtest_feeds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedscraping_settings {
		edges = append(edges, site.EdgeScrapingSettings)
	}
	if m.clearedfeeds {
		edges = append(edges, site.EdgeFeeds)
	}
	if m.clearedtest_feeds {
		edges = append(edges, site.EdgeTestFeeds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SiteMutation) EdgeCleared(name string) bool {
	switch name {
	case site.EdgeScrapingSettings:
		return m.clearedscraping_settings
	case site.EdgeFeeds:
		return m.clearedfeeds
	case site.EdgeTestFeeds:
		return m.clearedtest_feeds
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SiteMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Site unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SiteMutation) ResetEdge(name string) error {
	switch name {
	case site.EdgeScrapingSettings:
		m.ResetScrapingSettings()
		return nil
	case site.EdgeFeeds:
		m.ResetFeeds()
		return nil
	case site.EdgeTestFeeds:
		m.ResetTestFeeds()
		return nil
	}
	return fmt.Errorf("unknown Site edge %s", name)
}

// TestFeedMutation represents an operation that mutates the TestFeed nodes in the graph.
type TestFeedMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	title                  *string
	description            *string
	link                   *string
	published_at           *time.Time
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	site                   *int
	clearedsite            bool
	test_feed_items        map[int]struct{}
	removedtest_feed_items map[int]struct{}
	clearedtest_feed_items bool
	done                   bool
	oldValue               func(context.Context) (*TestFeed, error)
	predicates             []predicate.TestFeed
}

var _ ent.Mutation = (*TestFeedMutation)(nil)

// testfeedOption allows management of the mutation configuration using functional options.
type testfeedOption func(*TestFeedMutation)

// newTestFeedMutation creates new mutation for the TestFeed entity.
func newTestFeedMutation(c config, op Op, opts ...testfeedOption) *TestFeedMutation {
	m := &TestFeedMutation{
		config:        c,
		op:            op,
		typ:           TypeTestFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestFeedID sets the ID field of the mutation.
func withTestFeedID(id uuid.UUID) testfeedOption {
	return func(m *TestFeedMutation) {
		var (
			err   error
			once  sync.Once
			value *TestFeed
		)
		m.oldValue = func(ctx context.Context) (*TestFeed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestFeed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestFeed sets the old TestFeed of the mutation.
func withTestFeed(node *TestFeed) testfeedOption {
	return func(m *TestFeedMutation) {
		m.oldValue = func(context.Context) (*TestFeed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestFeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestFeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestFeed entities.
func (m *TestFeedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestFeedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestFeedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestFeed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TestFeedMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TestFeedMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TestFeedMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TestFeedMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestFeedMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TestFeedMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *TestFeedMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *TestFeedMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *TestFeedMutation) ResetLink() {
	m.link = nil
}

// SetPublishedAt sets the "published_at" field.
func (m *TestFeedMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *TestFeedMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *TestFeedMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TestFeedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestFeedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestFeedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestFeedMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestFeedMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestFeed entity.
// If the TestFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestFeedMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSiteID sets the "site" edge to the Site entity by id.
func (m *TestFeedMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the Site entity.
func (m *TestFeedMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the Site entity was cleared.
func (m *TestFeedMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *TestFeedMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *TestFeedMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *TestFeedMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// AddTestFeedItemIDs adds the "test_feed_items" edge to the TestFeedItem entity by ids.
func (m *TestFeedMutation) AddTestFeedItemIDs(ids ...int) {
	if m.test_feed_items == nil {
		m.test_feed_items = make(map[int]struct{})
	}
	for i := range ids {
		m.test_feed_items[ids[i]] = struct{}{}
	}
}

// ClearTestFeedItems clears the "test_feed_items" edge to the TestFeedItem entity.
func (m *TestFeedMutation) ClearTestFeedItems() {
	m.clearedtest_feed_items = true
}

// TestFeedItemsCleared reports if the "test_feed_items" edge to the TestFeedItem entity was cleared.
func (m *TestFeedMutation) TestFeedItemsCleared() bool {
	return m.clearedtest_feed_items
}

// RemoveTestFeedItemIDs removes the "test_feed_items" edge to the TestFeedItem entity by IDs.
func (m *TestFeedMutation) RemoveTestFeedItemIDs(ids ...int) {
	if m.removedtest_feed_items == nil {
		m.removedtest_feed_items = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.test_feed_items, ids[i])
		m.removedtest_feed_items[ids[i]] = struct{}{}
	}
}

// RemovedTestFeedItems returns the removed IDs of the "test_feed_items" edge to the TestFeedItem entity.
func (m *TestFeedMutation) RemovedTestFeedItemsIDs() (ids []int) {
	for id := range m.removedtest_feed_items {
		ids = append(ids, id)
	}
	return
}

// TestFeedItemsIDs returns the "test_feed_items" edge IDs in the mutation.
func (m *TestFeedMutation) TestFeedItemsIDs() (ids []int) {
	for id := range m.test_feed_items {
		ids = append(ids, id)
	}
	return
}

// ResetTestFeedItems resets all changes to the "test_feed_items" edge.
func (m *TestFeedMutation) ResetTestFeedItems() {
	m.test_feed_items = nil
	m.clearedtest_feed_items = false
	m.removedtest_feed_items = nil
}

// Where appends a list predicates to the TestFeedMutation builder.
func (m *TestFeedMutation) Where(ps ...predicate.TestFeed) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestFeedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestFeedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestFeed, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestFeedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestFeedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestFeed).
func (m *TestFeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestFeedMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, testfeed.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, testfeed.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, testfeed.FieldLink)
	}
	if m.published_at != nil {
		fields = append(fields, testfeed.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, testfeed.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testfeed.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestFeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testfeed.FieldTitle:
		return m.Title()
	case testfeed.FieldDescription:
		return m.Description()
	case testfeed.FieldLink:
		return m.Link()
	case testfeed.FieldPublishedAt:
		return m.PublishedAt()
	case testfeed.FieldCreatedAt:
		return m.CreatedAt()
	case testfeed.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestFeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testfeed.FieldTitle:
		return m.OldTitle(ctx)
	case testfeed.FieldDescription:
		return m.OldDescription(ctx)
	case testfeed.FieldLink:
		return m.OldLink(ctx)
	case testfeed.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case testfeed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testfeed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TestFeed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestFeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testfeed.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case testfeed.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case testfeed.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case testfeed.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case testfeed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testfeed.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestFeed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestFeedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestFeedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestFeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TestFeed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestFeedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestFeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestFeedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TestFeed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestFeedMutation) ResetField(name string) error {
	switch name {
	case testfeed.FieldTitle:
		m.ResetTitle()
		return nil
	case testfeed.FieldDescription:
		m.ResetDescription()
		return nil
	case testfeed.FieldLink:
		m.ResetLink()
		return nil
	case testfeed.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case testfeed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testfeed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestFeed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestFeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.site != nil {
		edges = append(edges, testfeed.EdgeSite)
	}
	if m.test_feed_items != nil {
		edges = append(edges, testfeed.EdgeTestFeedItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestFeedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testfeed.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	case testfeed.EdgeTestFeedItems:
		ids := make([]ent.Value, 0, len(m.test_feed_items))
		for id := range m.test_feed_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestFeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtest_feed_items != nil {
		edges = append(edges, testfeed.EdgeTestFeedItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestFeedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case testfeed.EdgeTestFeedItems:
		ids := make([]ent.Value, 0, len(m.removedtest_feed_items))
		for id := range m.removedtest_feed_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestFeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsite {
		edges = append(edges, testfeed.EdgeSite)
	}
	if m.clearedtest_feed_items {
		edges = append(edges, testfeed.EdgeTestFeedItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestFeedMutation) EdgeCleared(name string) bool {
	switch name {
	case testfeed.EdgeSite:
		return m.clearedsite
	case testfeed.EdgeTestFeedItems:
		return m.clearedtest_feed_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestFeedMutation) ClearEdge(name string) error {
	switch name {
	case testfeed.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown TestFeed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestFeedMutation) ResetEdge(name string) error {
	switch name {
	case testfeed.EdgeSite:
		m.ResetSite()
		return nil
	case testfeed.EdgeTestFeedItems:
		m.ResetTestFeedItems()
		return nil
	}
	return fmt.Errorf("unknown TestFeed edge %s", name)
}

// TestFeedItemMutation represents an operation that mutates the TestFeedItem nodes in the graph.
type TestFeedItemMutation struct {
	config
	op               Op
	typ              string
	id               *int
	title            *string
	description      *string
	link             *string
	published_at     *time.Time
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	test_feed        *uuid.UUID
	clearedtest_feed bool
	done             bool
	oldValue         func(context.Context) (*TestFeedItem, error)
	predicates       []predicate.TestFeedItem
}

var _ ent.Mutation = (*TestFeedItemMutation)(nil)

// testfeeditemOption allows management of the mutation configuration using functional options.
type testfeeditemOption func(*TestFeedItemMutation)

// newTestFeedItemMutation creates new mutation for the TestFeedItem entity.
func newTestFeedItemMutation(c config, op Op, opts ...testfeeditemOption) *TestFeedItemMutation {
	m := &TestFeedItemMutation{
		config:        c,
		op:            op,
		typ:           TypeTestFeedItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestFeedItemID sets the ID field of the mutation.
func withTestFeedItemID(id int) testfeeditemOption {
	return func(m *TestFeedItemMutation) {
		var (
			err   error
			once  sync.Once
			value *TestFeedItem
		)
		m.oldValue = func(ctx context.Context) (*TestFeedItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestFeedItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestFeedItem sets the old TestFeedItem of the mutation.
func withTestFeedItem(node *TestFeedItem) testfeeditemOption {
	return func(m *TestFeedItemMutation) {
		m.oldValue = func(context.Context) (*TestFeedItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestFeedItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestFeedItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestFeedItem entities.
func (m *TestFeedItemMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestFeedItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestFeedItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestFeedItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TestFeedItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TestFeedItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TestFeedItemMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TestFeedItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestFeedItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TestFeedItemMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *TestFeedItemMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *TestFeedItemMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *TestFeedItemMutation) ClearLink() {
	m.link = nil
	m.clearedFields[testfeeditem.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *TestFeedItemMutation) LinkCleared() bool {
	_, ok := m.clearedFields[testfeeditem.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *TestFeedItemMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, testfeeditem.FieldLink)
}

// SetPublishedAt sets the "published_at" field.
func (m *TestFeedItemMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *TestFeedItemMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *TestFeedItemMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TestFeedItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestFeedItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestFeedItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestFeedItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestFeedItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestFeedItem entity.
// If the TestFeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestFeedItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestFeedItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTestFeedID sets the "test_feed" edge to the TestFeed entity by id.
func (m *TestFeedItemMutation) SetTestFeedID(id uuid.UUID) {
	m.test_feed = &id
}

// ClearTestFeed clears the "test_feed" edge to the TestFeed entity.
func (m *TestFeedItemMutation) ClearTestFeed() {
	m.clearedtest_feed = true
}

// TestFeedCleared reports if the "test_feed" edge to the TestFeed entity was cleared.
func (m *TestFeedItemMutation) TestFeedCleared() bool {
	return m.clearedtest_feed
}

// TestFeedID returns the "test_feed" edge ID in the mutation.
func (m *TestFeedItemMutation) TestFeedID() (id uuid.UUID, exists bool) {
	if m.test_feed != nil {
		return *m.test_feed, true
	}
	return
}

// TestFeedIDs returns the "test_feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TestFeedID instead. It exists only for internal usage by the builders.
func (m *TestFeedItemMutation) TestFeedIDs() (ids []uuid.UUID) {
	if id := m.test_feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTestFeed resets all changes to the "test_feed" edge.
func (m *TestFeedItemMutation) ResetTestFeed() {
	m.test_feed = nil
	m.clearedtest_feed = false
}

// Where appends a list predicates to the TestFeedItemMutation builder.
func (m *TestFeedItemMutation) Where(ps ...predicate.TestFeedItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestFeedItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestFeedItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestFeedItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestFeedItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestFeedItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestFeedItem).
func (m *TestFeedItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestFeedItemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, testfeeditem.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, testfeeditem.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, testfeeditem.FieldLink)
	}
	if m.published_at != nil {
		fields = append(fields, testfeeditem.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, testfeeditem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testfeeditem.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestFeedItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testfeeditem.FieldTitle:
		return m.Title()
	case testfeeditem.FieldDescription:
		return m.Description()
	case testfeeditem.FieldLink:
		return m.Link()
	case testfeeditem.FieldPublishedAt:
		return m.PublishedAt()
	case testfeeditem.FieldCreatedAt:
		return m.CreatedAt()
	case testfeeditem.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestFeedItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testfeeditem.FieldTitle:
		return m.OldTitle(ctx)
	case testfeeditem.FieldDescription:
		return m.OldDescription(ctx)
	case testfeeditem.FieldLink:
		return m.OldLink(ctx)
	case testfeeditem.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case testfeeditem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testfeeditem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TestFeedItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestFeedItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testfeeditem.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case testfeeditem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case testfeeditem.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case testfeeditem.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case testfeeditem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testfeeditem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestFeedItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestFeedItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestFeedItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestFeedItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TestFeedItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestFeedItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testfeeditem.FieldLink) {
		fields = append(fields, testfeeditem.FieldLink)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestFeedItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestFeedItemMutation) ClearField(name string) error {
	switch name {
	case testfeeditem.FieldLink:
		m.ClearLink()
		return nil
	}
	return fmt.Errorf("unknown TestFeedItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestFeedItemMutation) ResetField(name string) error {
	switch name {
	case testfeeditem.FieldTitle:
		m.ResetTitle()
		return nil
	case testfeeditem.FieldDescription:
		m.ResetDescription()
		return nil
	case testfeeditem.FieldLink:
		m.ResetLink()
		return nil
	case testfeeditem.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case testfeeditem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testfeeditem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestFeedItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestFeedItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.test_feed != nil {
		edges = append(edges, testfeeditem.EdgeTestFeed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestFeedItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testfeeditem.EdgeTestFeed:
		if id := m.test_feed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestFeedItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestFeedItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestFeedItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtest_feed {
		edges = append(edges, testfeeditem.EdgeTestFeed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestFeedItemMutation) EdgeCleared(name string) bool {
	switch name {
	case testfeeditem.EdgeTestFeed:
		return m.clearedtest_feed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestFeedItemMutation) ClearEdge(name string) error {
	switch name {
	case testfeeditem.EdgeTestFeed:
		m.ClearTestFeed()
		return nil
	}
	return fmt.Errorf("unknown TestFeedItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestFeedItemMutation) ResetEdge(name string) error {
	switch name {
	case testfeeditem.EdgeTestFeed:
		m.ResetTestFeed()
		return nil
	}
	return fmt.Errorf("unknown TestFeedItem edge %s", name)
}
