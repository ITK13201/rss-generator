// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/rss-generator/ent/predicate"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
	"github.com/google/uuid"
)

// TestFeedItemQuery is the builder for querying TestFeedItem entities.
type TestFeedItemQuery struct {
	config
	ctx          *QueryContext
	order        []testfeeditem.OrderOption
	inters       []Interceptor
	predicates   []predicate.TestFeedItem
	withTestFeed *TestFeedQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestFeedItemQuery builder.
func (tfiq *TestFeedItemQuery) Where(ps ...predicate.TestFeedItem) *TestFeedItemQuery {
	tfiq.predicates = append(tfiq.predicates, ps...)
	return tfiq
}

// Limit the number of records to be returned by this query.
func (tfiq *TestFeedItemQuery) Limit(limit int) *TestFeedItemQuery {
	tfiq.ctx.Limit = &limit
	return tfiq
}

// Offset to start from.
func (tfiq *TestFeedItemQuery) Offset(offset int) *TestFeedItemQuery {
	tfiq.ctx.Offset = &offset
	return tfiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tfiq *TestFeedItemQuery) Unique(unique bool) *TestFeedItemQuery {
	tfiq.ctx.Unique = &unique
	return tfiq
}

// Order specifies how the records should be ordered.
func (tfiq *TestFeedItemQuery) Order(o ...testfeeditem.OrderOption) *TestFeedItemQuery {
	tfiq.order = append(tfiq.order, o...)
	return tfiq
}

// QueryTestFeed chains the current query on the "test_feed" edge.
func (tfiq *TestFeedItemQuery) QueryTestFeed() *TestFeedQuery {
	query := (&TestFeedClient{config: tfiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tfiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tfiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testfeeditem.Table, testfeeditem.FieldID, selector),
			sqlgraph.To(testfeed.Table, testfeed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, testfeeditem.TestFeedTable, testfeeditem.TestFeedColumn),
		)
		fromU = sqlgraph.SetNeighbors(tfiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TestFeedItem entity from the query.
// Returns a *NotFoundError when no TestFeedItem was found.
func (tfiq *TestFeedItemQuery) First(ctx context.Context) (*TestFeedItem, error) {
	nodes, err := tfiq.Limit(1).All(setContextOp(ctx, tfiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testfeeditem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) FirstX(ctx context.Context) *TestFeedItem {
	node, err := tfiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestFeedItem ID from the query.
// Returns a *NotFoundError when no TestFeedItem ID was found.
func (tfiq *TestFeedItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tfiq.Limit(1).IDs(setContextOp(ctx, tfiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testfeeditem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) FirstIDX(ctx context.Context) int {
	id, err := tfiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestFeedItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestFeedItem entity is found.
// Returns a *NotFoundError when no TestFeedItem entities are found.
func (tfiq *TestFeedItemQuery) Only(ctx context.Context) (*TestFeedItem, error) {
	nodes, err := tfiq.Limit(2).All(setContextOp(ctx, tfiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testfeeditem.Label}
	default:
		return nil, &NotSingularError{testfeeditem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) OnlyX(ctx context.Context) *TestFeedItem {
	node, err := tfiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestFeedItem ID in the query.
// Returns a *NotSingularError when more than one TestFeedItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (tfiq *TestFeedItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tfiq.Limit(2).IDs(setContextOp(ctx, tfiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testfeeditem.Label}
	default:
		err = &NotSingularError{testfeeditem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := tfiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestFeedItems.
func (tfiq *TestFeedItemQuery) All(ctx context.Context) ([]*TestFeedItem, error) {
	ctx = setContextOp(ctx, tfiq.ctx, "All")
	if err := tfiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestFeedItem, *TestFeedItemQuery]()
	return withInterceptors[[]*TestFeedItem](ctx, tfiq, qr, tfiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) AllX(ctx context.Context) []*TestFeedItem {
	nodes, err := tfiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestFeedItem IDs.
func (tfiq *TestFeedItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tfiq.ctx.Unique == nil && tfiq.path != nil {
		tfiq.Unique(true)
	}
	ctx = setContextOp(ctx, tfiq.ctx, "IDs")
	if err = tfiq.Select(testfeeditem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) IDsX(ctx context.Context) []int {
	ids, err := tfiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tfiq *TestFeedItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tfiq.ctx, "Count")
	if err := tfiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tfiq, querierCount[*TestFeedItemQuery](), tfiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) CountX(ctx context.Context) int {
	count, err := tfiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tfiq *TestFeedItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tfiq.ctx, "Exist")
	switch _, err := tfiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tfiq *TestFeedItemQuery) ExistX(ctx context.Context) bool {
	exist, err := tfiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestFeedItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tfiq *TestFeedItemQuery) Clone() *TestFeedItemQuery {
	if tfiq == nil {
		return nil
	}
	return &TestFeedItemQuery{
		config:       tfiq.config,
		ctx:          tfiq.ctx.Clone(),
		order:        append([]testfeeditem.OrderOption{}, tfiq.order...),
		inters:       append([]Interceptor{}, tfiq.inters...),
		predicates:   append([]predicate.TestFeedItem{}, tfiq.predicates...),
		withTestFeed: tfiq.withTestFeed.Clone(),
		// clone intermediate query.
		sql:  tfiq.sql.Clone(),
		path: tfiq.path,
	}
}

// WithTestFeed tells the query-builder to eager-load the nodes that are connected to
// the "test_feed" edge. The optional arguments are used to configure the query builder of the edge.
func (tfiq *TestFeedItemQuery) WithTestFeed(opts ...func(*TestFeedQuery)) *TestFeedItemQuery {
	query := (&TestFeedClient{config: tfiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tfiq.withTestFeed = query
	return tfiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TestFeedItem.Query().
//		GroupBy(testfeeditem.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tfiq *TestFeedItemQuery) GroupBy(field string, fields ...string) *TestFeedItemGroupBy {
	tfiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestFeedItemGroupBy{build: tfiq}
	grbuild.flds = &tfiq.ctx.Fields
	grbuild.label = testfeeditem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.TestFeedItem.Query().
//		Select(testfeeditem.FieldTitle).
//		Scan(ctx, &v)
func (tfiq *TestFeedItemQuery) Select(fields ...string) *TestFeedItemSelect {
	tfiq.ctx.Fields = append(tfiq.ctx.Fields, fields...)
	sbuild := &TestFeedItemSelect{TestFeedItemQuery: tfiq}
	sbuild.label = testfeeditem.Label
	sbuild.flds, sbuild.scan = &tfiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestFeedItemSelect configured with the given aggregations.
func (tfiq *TestFeedItemQuery) Aggregate(fns ...AggregateFunc) *TestFeedItemSelect {
	return tfiq.Select().Aggregate(fns...)
}

func (tfiq *TestFeedItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tfiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tfiq); err != nil {
				return err
			}
		}
	}
	for _, f := range tfiq.ctx.Fields {
		if !testfeeditem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tfiq.path != nil {
		prev, err := tfiq.path(ctx)
		if err != nil {
			return err
		}
		tfiq.sql = prev
	}
	return nil
}

func (tfiq *TestFeedItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestFeedItem, error) {
	var (
		nodes       = []*TestFeedItem{}
		withFKs     = tfiq.withFKs
		_spec       = tfiq.querySpec()
		loadedTypes = [1]bool{
			tfiq.withTestFeed != nil,
		}
	)
	if tfiq.withTestFeed != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, testfeeditem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestFeedItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestFeedItem{config: tfiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tfiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tfiq.withTestFeed; query != nil {
		if err := tfiq.loadTestFeed(ctx, query, nodes, nil,
			func(n *TestFeedItem, e *TestFeed) { n.Edges.TestFeed = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tfiq *TestFeedItemQuery) loadTestFeed(ctx context.Context, query *TestFeedQuery, nodes []*TestFeedItem, init func(*TestFeedItem), assign func(*TestFeedItem, *TestFeed)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestFeedItem)
	for i := range nodes {
		if nodes[i].test_feed_id == nil {
			continue
		}
		fk := *nodes[i].test_feed_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(testfeed.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "test_feed_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tfiq *TestFeedItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tfiq.querySpec()
	_spec.Node.Columns = tfiq.ctx.Fields
	if len(tfiq.ctx.Fields) > 0 {
		_spec.Unique = tfiq.ctx.Unique != nil && *tfiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tfiq.driver, _spec)
}

func (tfiq *TestFeedItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testfeeditem.Table, testfeeditem.Columns, sqlgraph.NewFieldSpec(testfeeditem.FieldID, field.TypeInt))
	_spec.From = tfiq.sql
	if unique := tfiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tfiq.path != nil {
		_spec.Unique = true
	}
	if fields := tfiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testfeeditem.FieldID)
		for i := range fields {
			if fields[i] != testfeeditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tfiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tfiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tfiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tfiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tfiq *TestFeedItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tfiq.driver.Dialect())
	t1 := builder.Table(testfeeditem.Table)
	columns := tfiq.ctx.Fields
	if len(columns) == 0 {
		columns = testfeeditem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tfiq.sql != nil {
		selector = tfiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tfiq.ctx.Unique != nil && *tfiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tfiq.predicates {
		p(selector)
	}
	for _, p := range tfiq.order {
		p(selector)
	}
	if offset := tfiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tfiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestFeedItemGroupBy is the group-by builder for TestFeedItem entities.
type TestFeedItemGroupBy struct {
	selector
	build *TestFeedItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tfigb *TestFeedItemGroupBy) Aggregate(fns ...AggregateFunc) *TestFeedItemGroupBy {
	tfigb.fns = append(tfigb.fns, fns...)
	return tfigb
}

// Scan applies the selector query and scans the result into the given value.
func (tfigb *TestFeedItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tfigb.build.ctx, "GroupBy")
	if err := tfigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestFeedItemQuery, *TestFeedItemGroupBy](ctx, tfigb.build, tfigb, tfigb.build.inters, v)
}

func (tfigb *TestFeedItemGroupBy) sqlScan(ctx context.Context, root *TestFeedItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tfigb.fns))
	for _, fn := range tfigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tfigb.flds)+len(tfigb.fns))
		for _, f := range *tfigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tfigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tfigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestFeedItemSelect is the builder for selecting fields of TestFeedItem entities.
type TestFeedItemSelect struct {
	*TestFeedItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tfis *TestFeedItemSelect) Aggregate(fns ...AggregateFunc) *TestFeedItemSelect {
	tfis.fns = append(tfis.fns, fns...)
	return tfis
}

// Scan applies the selector query and scans the result into the given value.
func (tfis *TestFeedItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tfis.ctx, "Select")
	if err := tfis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestFeedItemQuery, *TestFeedItemSelect](ctx, tfis.TestFeedItemQuery, tfis, tfis.inters, v)
}

func (tfis *TestFeedItemSelect) sqlScan(ctx context.Context, root *TestFeedItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tfis.fns))
	for _, fn := range tfis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tfis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tfis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
