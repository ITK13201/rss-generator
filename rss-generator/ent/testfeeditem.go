// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ITK13201/rss-generator/ent/testfeed"
	"github.com/ITK13201/rss-generator/ent/testfeeditem"
	"github.com/google/uuid"
)

// TestFeedItem is the model entity for the TestFeedItem schema.
type TestFeedItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestFeedItemQuery when eager-loading is set.
	Edges        TestFeedItemEdges `json:"edges"`
	test_feed_id *uuid.UUID
	selectValues sql.SelectValues
}

// TestFeedItemEdges holds the relations/edges for other nodes in the graph.
type TestFeedItemEdges struct {
	// TestFeed holds the value of the test_feed edge.
	TestFeed *TestFeed `json:"test_feed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestFeedOrErr returns the TestFeed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestFeedItemEdges) TestFeedOrErr() (*TestFeed, error) {
	if e.TestFeed != nil {
		return e.TestFeed, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: testfeed.Label}
	}
	return nil, &NotLoadedError{edge: "test_feed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestFeedItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testfeeditem.FieldID:
			values[i] = new(sql.NullInt64)
		case testfeeditem.FieldTitle, testfeeditem.FieldDescription, testfeeditem.FieldLink:
			values[i] = new(sql.NullString)
		case testfeeditem.FieldPublishedAt, testfeeditem.FieldCreatedAt, testfeeditem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case testfeeditem.ForeignKeys[0]: // test_feed_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestFeedItem fields.
func (tfi *TestFeedItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testfeeditem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tfi.ID = int(value.Int64)
		case testfeeditem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tfi.Title = value.String
			}
		case testfeeditem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tfi.Description = value.String
			}
		case testfeeditem.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				tfi.Link = value.String
			}
		case testfeeditem.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				tfi.PublishedAt = value.Time
			}
		case testfeeditem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tfi.CreatedAt = value.Time
			}
		case testfeeditem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tfi.UpdatedAt = value.Time
			}
		case testfeeditem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field test_feed_id", values[i])
			} else if value.Valid {
				tfi.test_feed_id = new(uuid.UUID)
				*tfi.test_feed_id = *value.S.(*uuid.UUID)
			}
		default:
			tfi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestFeedItem.
// This includes values selected through modifiers, order, etc.
func (tfi *TestFeedItem) Value(name string) (ent.Value, error) {
	return tfi.selectValues.Get(name)
}

// QueryTestFeed queries the "test_feed" edge of the TestFeedItem entity.
func (tfi *TestFeedItem) QueryTestFeed() *TestFeedQuery {
	return NewTestFeedItemClient(tfi.config).QueryTestFeed(tfi)
}

// Update returns a builder for updating this TestFeedItem.
// Note that you need to call TestFeedItem.Unwrap() before calling this method if this TestFeedItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (tfi *TestFeedItem) Update() *TestFeedItemUpdateOne {
	return NewTestFeedItemClient(tfi.config).UpdateOne(tfi)
}

// Unwrap unwraps the TestFeedItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tfi *TestFeedItem) Unwrap() *TestFeedItem {
	_tx, ok := tfi.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestFeedItem is not a transactional entity")
	}
	tfi.config.driver = _tx.drv
	return tfi
}

// String implements the fmt.Stringer.
func (tfi *TestFeedItem) String() string {
	var builder strings.Builder
	builder.WriteString("TestFeedItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tfi.ID))
	builder.WriteString("title=")
	builder.WriteString(tfi.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tfi.Description)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(tfi.Link)
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(tfi.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tfi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tfi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestFeedItems is a parsable slice of TestFeedItem.
type TestFeedItems []*TestFeedItem
